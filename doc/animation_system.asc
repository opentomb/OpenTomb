Animation System
----------------

Concepts
~~~~~~~~

Local Space, Object Space and World Space::
    When talking about coordinates, they are (especially in the context of animations) usually _in parent space_ or
    _local_. Both terms have the same meaning, which is that an object's movement is relative to some other object
    called its _parent_.  When talking about _Object Space_, the movements are considered to be relative to an
    indirect parent; for example, a tree of objects -- all with local movements -- can be calculated so that their
    movements can be expressed relative to their ultimate grandparent (the object they all belong to). +
    Finally, all movements can be calculated to be _global_ or in _world space_, so that they are independent of any
    object they might be relative to.
Bone::
    A bone describes movement (rotational and positional), relative to its _parent_. Bones are usually organized as a
    tree, where multiple bones may have one single parent. Bones are used to deform models.

.Bone Spaces
====
Consider a simple tree of three bones, with bone 1 at the root of it, and bones 2 and 3 attached as children to bone 1.
If bone 1 describes a movement of, say, 45 degrees around the X axis, the children are implicitly moved, too, because
their movement is relative to their parent. If bone 2 would also have a rotation of 45 degrees around X, it would end up
with a global rotation of 90 degrees, as its local rotation sums up with its parent's rotation.
====

[[lara_skeleton]]
image::images/illustrations/meshtree.png[title="Lara's Skeleton",width=450,float="right"]

Skeleton::
    A skeleton is a tree of bones, with its own movement. You could say that a skeleton is a ``virtual root bone''.
    <<lara_skeleton, The image to the right>> shows Lara's skeleton. +
    Please note that a skeleton is only a concept that only makes sense in combination with a _mesh_ which it deforms;
    skeletons can be used with multiple (different) meshes, resulting in the meshes having all the same pose. This has
    been commonly used to create a ``doppelganger effect'', where the doppelganger of the player does the exact same
    movement of the player, because it's simply using the player's skeleton.

Pose::
    A pose describes the -- well, pose of a skeleton. If you have a skeleton which models the layout of a human statue,
    the bone movements in sum are the pose of that statue.

Animation::
    An animation is a series of poses, describing the movement of a skeleton over time.  Usually, these poses are
    interpolated to be smoother, because poses only contain distinct positions and rotations, but not the speed or
    direction at which the bones move at that specific time point.

Model::
    A model (or _animated model_) combines a skeleton, a mesh, and its animation system.

NOTE: Rotations are performed in Y, X, Z order.

Animation System Concepts
^^^^^^^^^^^^^^^^^^^^^^^^^

Each model has an internal _state_; for example, Lara may be standing idle, running, jumping, rolling, etc., and a door
may have the states _opened_ and _closed_. Every state has animations attached to it; the door has two ``animations'',
one (static) animation loop showing it closed, the other one showing it opened.

Now, if the door is closed and should show the ``opening'' animation, it plays a <<TransitionCases, _transition
animation_>>. A transition animation is not looped and only used to smoothly switch between animation loops. Especially
in the case of Lara's animations, there are many transition animations, and the system to decide which transition
animation to play is quite elaborate. It depends on two things:

. *The current internal and target states.*
  For example, if Lara is running and starts to jump, it doesn't make sense to show the transition animation from
  standing to rolling.
. *The current animation frame.*
  To have a sensible, smooth animation, there _must_ be a decision between several intermediate animations. If Lara is
  running, and her right foot currently touches the ground, it doesn't make any sense to show how she pushes herself up
  to jump with her left leg.

Such _transition cases_ not only define the target animation, but also the _target frame_ of that animation, to have it
start to play somewhere in the middle of the animation. This is useful especially in cases where the transition between
two fast or complex animations would otherwise lead to some sort of ``warp effect''.

Each animation may also contain <<AnimationCommand, _animation commands_>>, which are bound to specific frames. Such
commands may be used, for example, to play sounds (like the ``uh'' when Lara jumps up) or to give skeletons an
additional speed (like when jumping forward).

NOTE: The actual animation frame rate is always locked to 30 FPS. All engine internal counters, including animation
frame counters, are also using 30 FPS timebase.

Data Structures
~~~~~~~~~~~~~~~

[[BoneTree]]
Bone Tree Structure
^^^^^^^^^^^^^^^^^^^

[[tr_bonenode]]
[source,cpp]
----
struct BoneNode // 16 bytes
{
    uint32_t stackOperation;
     int32_t positionX;
     int32_t positionY;
     int32_t positionZ;
};
----

The +BoneTree[]+ array consists of +BoneNode+s.

By default, the bones' parents are always initialized to their predecessors; for the first bone, this is implicitly its
skeleton. Also, the first bones's +stackOperation+ should _always_ be considered to be ``Push''.

After initializing the parents to their defaults, the stack operations are applied:

.Stack operations
[horizontal]
Use Predecessor (0)::
    The most recently processed bone is the parent of the current bone.  This operation is invalid if the current bone
    is the first being processed.
Push (1)::
    Push the current bone's parent onto the stack.
Pop (2)::
    Pop a bone from the stack and assign it as the current bone's parent. This operation is invalid if the stack is
    empty.
Top (3)::
    Same as ``Pop'', but do not pop the bone from the stack.

+positionX+, +positionY+ and +positionZ+ are in parent space.

[[Animation]]
TR1-3 Animation Structure
^^^^^^^^^^^^^^^^^^^^^^^^^

This describes each individual animation. These may be looped by specifying the next animation to be itself.

CAUTION: {TR2} {TR3} In TR2 and TR3, one must be careful when parsing poses using the +poseDataSize+ as the size of each
pose, since an animation's pose data may extend into the next animation's pose data, and that may have a different
+poseDataSize+ value.

[[tr_animation]]
[source,cpp]
----
struct Animation // 32 bytes
{
    uint32_t  poseDataOffset;
     uint8_t  stretchFactor;
     uint8_t  poseDataSize;   // Number of int16_t's in PoseData[] used by this animation

    uint16_t  stateId;

       fixed  speed;
       fixed  accelleration;

    uint16_t  firstFrame;   // First frame in this animation
    uint16_t  lastFrame;    // Last frame in this animation
    uint16_t  nextAnimation;
    uint16_t  nextFrame;

    uint16_t  transitionCaseCount;
    uint16_t  transitionCaseOffset; // Offset into TransitionCases[]

    uint16_t  animationCommandCount;   // How many of them to use.
    uint16_t  animationCommandsOffset; // Offset into AnimationCommand[]
};
----

[horizontal]
+poseDataOffset+::
    Byte offset into +PoseData[]+ (divide by 2 for +PoseData[i]+).

+stretchFactor+::
    Multiplier value which defines how many _game frames_ will be spent for each actual animation frame. For example, if
    it is 1, then each animation frame belongs to a single game frame. If the value is 2, then each animation frame
    lasts two game frames, and so on. If it is stretched, animation frames will be interpolated between game frames
    using the _slerp_ function. footnote:[See https://en.wikipedia.org/wiki/Slerp for a mathematical explanation.]

+stateId+::
    Identifies current state type to be used with this animation. The Engine uses the current +stateId+ not only to
    solve transitions, but also to define Lara's current behaviour -- like collisional routines to be used, controls
    to be checked, health/air/sprint points to be drained, and so on.

+speed+ and +accelleration+::
    Used to set a specific momentum to a given entity. That is, the entity will be accelerated with the +accelleration+
    value, until the +speed+ value is reached. If +accelleration+ is negative, the speed will be decreased to fit the
    +speed+ value. The direction in which the entity is moved using the +speed+ value is hardcoded, and is mostly
    forward.

+nextAnimation+::
    Defines which animation should be played after the current one is finished. When the current animation ends, the
    engine will switch to +nextAnimation+, not regarding current +stateId+ value. If the +nextAnimation+ value is the
    same as the animation number itself, it means that the animation will be looped until the loop is broken by some
    transition.

+nextFrame+::
    Specifies the frame number to be used when switching to the next animation. For example, if +nextFrame+ is 5 and
    +nextAnimation+ is 20, it basically means that at the end of the current animation the engine will switch right to
    frame 5 of animation 20. If the animation is looped, +nextFrame+ defines to which frame the animation should be
    rewound. It allows to ``eat up'' certain start-up frames of some animations and re-use them as loops.

TIP: The animation length in frames is equal to +length = (lastFrame - firstFrame) + 1+.

TR4-5 Animation Structure
^^^^^^^^^^^^^^^^^^^^^^^^^

{TR4} {TR5} For TR4 and TR5, an extended version of <<Animation, +Animation+>> is used. In addition to +speed+ and
+accelleration+ values, TR4 introduced _lateral_ values, which are used to move the entity to the sides, rather than
forward or backward. However, these values are only used for _any entity but Lara_ -- the engine ignores them in such a
case.

Lateral speed and acceleration are primarily used for ``start-up'' animations of NPCs -- for example, armed baddies in
TR4 can roll or jump aside.

[[tr4_animation]]
[source,cpp]
----
struct TR4Animation // 40 bytes
{
    // ... same as before ...
       fixed  speed;
       fixed  accelleration;

    // New fields
       fixed  lateralSpeed;
       fixed  lateralAccelleration;

    uint16_t  firstFrame;
    uint16_t  lastFrame;

    // ... same as before ...
};
----

Transitions
^^^^^^^^^^^

Each transition case collection entry contains the state to change to and which <<tr_transitioncase, transition cases>>
to use; there may be more than one, with each separate one covering a different range of frames.

[[tr_transitions]]
[source,cpp]
----
struct TransitionCases // 6 bytes
{
    uint16_t stateId;
    uint16_t transitionCaseCount; // number of transition cases (seems to always be 1..5)
    uint16_t firstTransitionCase; // Offset into TransitionCases[]
};
----

[[TransitionCases]]
Transition Cases
^^^^^^^^^^^^^^^^

This specifies the next <<Animation, animation>> and frame to use; these are associated with some range of frames.
This allows, for example, to specify different target animations depending on which of Lara's feet is currently in
front.

[[tr_transitioncase]]
[source,cpp]
----
struct TransitionCase // 8 bytes
{
    int16_t firstFrame;      // Frame range this case applies to
    int16_t lastFrame;
    int16_t targetAnimation; // Animation to dispatch to
    int16_t targetFrame;     // Frame offset to dispatch to
};
----

[[AnimationCommand]]
AnimationCommand Structure
^^^^^^^^^^^^^^^^^^^^^^^^^^

These are various commands associated with each animation. They are varying numbers of ++int16_t++s packed into an
array. Just like the <<tr_floordata,FloorData>>, AnimationCommands must be parsed sequentially, one by one.

The first AnimationCommand entry is the _opcode_, which also determines how many parameters follow (i.e., how many
+int16_t+ values must be parsed without switching to the next AnimationCommand). For a given <<Animation, animation>>,
there are +Animation::animationCommandCount+ commands.

Some of commands refer to the whole animation (jump speed, position change and empty hands commands), while others are
associated with specific frames (sound, bubbles, etc.).

[[tr_animationcommand]]
[source,cpp]
----
struct AnimationCommand // 2 bytes
{
    int16_t value;
};
----

.AnimationCommand opcodes
+1+ -- Set Position (3 parameters)::
    Sets relative entity position (x, y, z); found in grab and block-move animations.
+2+ -- Set Velocity (2 parameters)::
    Vertical and horizontal speed for jumping.
+3+ -- Empty Hands (no parameters)::
    This command is performed in the end of animation of Lara pulling a switch, inserting a key, grabbing a pushable
    block, and so on. It is needed because engine ``locks'' Lara's ability to draw weapons or ignite a flare when such
    action is performed, and only way to unlock it is to call this command.
+4+ -- Kill (no parameters)::
    Kill entity. This effectively disables the entity and removes it from the world.
+5+ -- Play Sound (2 parameters)::
    The first argument is a frame number, and the second one is the ID of the sound to play at that frame (internal
    sound index).
    +
    {TR2}{TR3}{TR4}{TR5} In TR2 and above, besides Sound ID, the second parameter may contain two
    ``packed'' bit flags (see below).
+6+ -- Play Effect (2 parameters)::
    The first parameter is a frame number, and the second one is the effect number. Note that _effect_ here is the very
    same kind of effect used in _trigger action_ with the same name. The effect meanings will be listed separately.
+7+ -- Interact (?? parameters)::
    ??

.``Play Sound'' Sound ID bitflags
[horizontal]
+0x4000+::
    play this sound when on dry land (example: footsteps)
+0x8000+::
    play this sound when in water (example: running through shallow water)

Pose Structure
^^^^^^^^^^^^^^
Poses indicate how bones are positioned and rotated. They work in conjunction with <<Animation, +Animations[]+>>
and <<BoneTree, +BoneTree[]+>>. A given pose has the following format:

[[tr_pose]]
[source,cpp]
----
struct Vertex
{
    int16_t x, y, z;
};

struct BoundingBox
{
    Vertex first;
    Vertex second;
};

virtual struct Pose
{
  BoundingBox  boundingBox;
       Vertex  offset; // Starting offset for this model
      int16_t  angleSetCount;
     uint16_t  values[]; // variable size
};
----

[horizontal]
+angleSetCount+::
    {TR1} Number of angle sets to follow; these start with the first bone, and bones without angles get zero angles. +
    {TR2}{TR3}{TR4}{TR5} From TR2 on, +angleSetCount+ is implicitly +meshCount+ (from model).

+values+::
    Sets of rotation angles for all the bones with respect to their parent bones.

TIP: Since TR2, an angleset can specify either one or all three axes of rotation. The highest two bits of the first
angleset value are the _axis selector_; for TR1, this selector should _always_ be considered 0.

.Angleset axis selector values
* +0+ -- All axes, in compressed format (see below).
* +1+ -- X only
* +2+ -- Y only
* +3+ -- Z only

For single-axis angles, the lower 10 bits of the first angleset value indicate a rotation with a value range
latexmath:[$ [0; 1024[ $], which is scaled to latexmath:[$ [0; 360[ $] degrees. The compressed three-axis rotation
mentioned above uses one more angleset element, using the full latexmath:[$10 \cdot 3$] bits available. The binary
layout of the two +uint16_t+'s is: +**xx xxxx xxxx yyyy | yyyy yyzz zzzz zzzz+.

[CAUTION]
====
{TR1} In TR1, the word order of the angleset values is reversed: +yyyy yyzz zzzz zzzz | **xx xxxx xxxx yyyy+

{TR4}{TR5} In TR4 and above, single-axis angles (where the axis selector is not zero) have a higher precision of 12 bits
instead of 10 bits, with the value range latexmath:[$[0; 4096[$] mapped to latexmath:[$[0; 360[$] degrees.
====
