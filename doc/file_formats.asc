Level File Formats
------------------

The Entire TR1 Level Format
~~~~~~~~~~~~~~~~~~~~~~~~~~~

What follows is the physical `.PHD` file layout, byte for byte.

CAUTION: This is not a ``real'' C/C++ structure, in that some arrays are variable-length, with the length being defined by another element of the structure.

[source,cpp]
----
uint32_t Version; // version (4 bytes)
uint32_t NumTextiles; // number of texture tiles (4 bytes)
tr2_textile8 Textile8[NumTextiles]; // 8-bit (palettized) textiles (NumTextiles * 65536 bytes)
uint32_t Unused; // 32-bit unused value (4 bytes)
uint16_t NumRooms; // number of rooms (2 bytes)
virtual struct
{
    tr2_room_info RoomInfo; // room header (16 bytes)
    uint32_t NumData; // number of data uint16_t's to follow (=RoomData) (4 bytes)
    virtual struct
    {
        uint16_t NumVertices; // number of vertices to follow (2 bytes)
        tr2_vertex_room Vertices[NumVertices]; // vertex list (NumVertices * 8 bytes [TR1 version])
        uint16_t NumRectangles; // number of rectangles to follow (2 bytes)
        tr_face4 Rectangles[NumRectangles]; // rectangle list (NumRectangles * 10 bytes)
        uint16_t NumTriangles; // number of triangles to follow (2 bytes)
        tr_face3 Triangles[NumTriangles]; // triangle list (NumTriangles * 8 bytes)
        uint16_t NumSprites; // number of sprites to follow (2 bytes)
        tr2_room_sprite Sprites[NumSprites]; // room sprite list (NumSprites * 4 bytes)
        uint16_t NumDoors; // number of doors to follow (2 bytes)
        tr2_room_door Doors[NumDoors]; // door list (NumDoors * 32 bytes)
        uint16_t NumZsector; // sector table width (2 bytes)
        uint16_t NumXsector; // sector table height (2 bytes)
        tr2_room_sector SectorData[NumZsector * NumXsector]; // sector table (NumZsector * NumXsector * 8 bytes)
        int16_t Intensity1;
        uint16_t NumLights; // number of lights to follow (2 bytes)
        tr2_room_light Lights[NumLights]; // light list (NumLights * 18 bytes [TR1 version])
        uint16_t NumStaticMeshes; // number of static mesh records to follow (2 bytes)
        tr2_room_staticmesh StaticMeshes[NumStaticMeshes]; // static mesh data (NumStaticMeshes * 18 bytes [TR1 version])
        int16_t AlternateRoom; // (2 bytes)
        uint16_t Flags; // (2 bytes)
    } RoomData;
} Rooms[NumRooms];
uint32_t NumFloorData; // number of floor data uint16_t's to follow (4 bytes)
uint16_t FloorData[NumFloorData]; // floor data (NumFloorData * 2 bytes)
uint32_t NumMeshData; // number of uint16_t's of mesh data to follow (=Meshes[]) (4 bytes)
virtual struct
{
    tr2_vertex Centre; // relative coordinates of mesh centre (6 bytes)
    uint8_t Unknown1[4]; // unknown (4 bytes)
    int16_t NumVertices; // number of vertices to follow (2 bytes)
    tr2_vertex Vertices[NumVertices]; // list of vertices (NumVertices * 6 bytes)
    int16_t NumNormals; // number of normals to follow (2 bytes)
    tr2_vertex Normals[NumNormals]; // list of normals (NumNormals * 6 bytes) (becomes Lights if NumNormals < 0; 2 bytes)
    int16_t NumTexturedRectangles; // number of textured rectangles to follow (2 bytes)
    tr_face4 TexturedRectangles[NumTexturedRectangles]; // list of textured rectangles (NumTexturedRectangles * 10 bytes)
    int16_t NumTexturedTriangles; // number of textured triangles to follow (2 bytes)
    tr_face3 TexturedTriangles[NumTexturedTriangles]; // list of textured triangles (NumTexturedTriangles * 8 bytes)
    int16_t NumColouredRectangles; // number of coloured rectangles to follow (2 bytes)
    tr_face4 ColouredRectangles[NumColouredRectangles]; // list of coloured rectangles (NumColouredRectangles * 10 bytes)
    int16_t NumColouredTriangles; // number of coloured triangles to follow (2 bytes)
    tr_face3 ColouredTriangles[NumColouredTriangles]; // list of coloured triangles (NumColouredTriangles * 8 bytes)
} Meshes[NumMeshPointers]; // note that NumMeshPointers comes AFTER Meshes[]
uint32_t NumMeshPointers; // number of mesh pointers to follow (4 bytes)
uint32_t MeshPointers[NumMeshPointers]; // mesh pointer list (NumMeshPointers * 4 bytes)
uint32_t NumAnimations; // number of animations to follow (4 bytes)
tr2_animation Animations[NumAnimations]; // animation list (NumAnimations * 32 bytes)
uint32_t NumStateChanges; // number of state changes to follow (4 bytes)
tr2_state_change StateChanges[NumStateChanges]; // state-change list (NumStructures * 6 bytes)
uint32_t NumAnimDispatches; // number of animation dispatches to follow (4 bytes)
tr2_anim_dispatch AnimDispatches[NumAnimDispatches]; // animation-dispatch list list (NumAnimDispatches * 8 bytes)
uint32_t NumAnimCommands; // number of animation commands to follow (4 bytes)
tr2_anim_command AnimCommands[NumAnimCommands]; // animation-command list (NumAnimCommands * 2 bytes)
uint32_t NumMeshTrees; // number of MeshTrees to follow (4 bytes)
tr2_meshtree MeshTrees[NumMeshTrees]; // MeshTree list (NumMeshTrees * 4 bytes)
uint32_t NumFrames; // number of words of frame data to follow (4 bytes)
uint16_t Frames[NumFrames]; // frame data (NumFrames * 2 bytes)
uint32_t NumMoveables; // number of moveables to follow (4 bytes)
tr2_moveable Moveables[NumMoveables]; // moveable list (NumMoveables * 18 bytes)
uint32_t NumStaticMeshes; // number of StaticMesh data records to follow (4 bytes)
tr2_staticmesh StaticMeshes[NumStaticMeshes]; // StaticMesh data (NumStaticMesh * 32 bytes)
uint32_t NumObjectTextures; // number of object textures to follow (4 bytes) (after AnimatedTextures in TR3)
tr2_object_texture ObjectTextures[NumObjectTextures]; // object texture list (NumObjectTextures * 20 bytes) (after AnimatedTextures in TR3)
uint32_t NumSpriteTextures; // number of sprite textures to follow (4 bytes)
tr2_sprite_texture SpriteTextures[NumSpriteTextures]; // sprite texture list (NumSpriteTextures * 16 bytes)
uint32_t NumSpriteSequences; // number of sprite sequences records to follow (4 bytes)
tr2_sprite_sequence SpriteSequences[NumSpriteSequences]; // sprite sequence data (NumSpriteSequences * 8 bytes)
uint32_t NumCameras; // number of camera data records to follow (4 bytes)
tr2_camera Cameras[NumCameras]; // camera data (NumCameras * 16 bytes)
uint32_t NumSoundSources; // number of sound source data records to follow (4 bytes)
tr2_sound_source SoundSources[NumSoundSources]; // sound source data (NumSoundSources * 16 bytes)
uint32_t NumBoxes; // number of box data records to follow (4 bytes)
tr2_box Boxes[NumBoxes]; // box data (NumBoxes * 20 bytes [TR1 version])
uint32_t NumOverlaps; // number of overlap records to follow (4 bytes)
uint16_t Overlaps[NumOverlaps]; // overlap data (NumOverlaps * 2 bytes)
uint16_t GroundZone[2*NumBoxes]; // ground zone data
uint16_t GroundZone2[2*NumBoxes]; // ground zone 2 data
uint16_t FlyZone[2*NumBoxes]; // fly zone data
uint16_t GroundZoneAlt[2*NumBoxes]; // ground zone data (alternate rooms?)
uint16_t GroundZoneAlt2[2*NumBoxes]; // ground zone 2 data (alternate rooms?)
uint16_t FlyZoneAlt[2*NumBoxes]; // fly zone data (alternate rooms?)
uint32_t NumAnimatedTextures; // number of animated texture records to follow (4 bytes)
uint16_t AnimatedTextures[NumAnimatedTextures]; // animated texture data (NumAnimatedTextures * 2 bytes)
uint32_t NumItems; // number of items to follow (4 bytes)
tr2_item Items[NumItems]; // item list (NumItems * 22 bytes [TR1 version])
uint8_t LightMap[32 * 256]; // light map (8192 bytes)
tr_colour Palette[256]; // 8-bit palette (768 bytes)
uint16_t NumCinematicFrames; // number of cinematic frame records to follow (2 bytes)
tr2_cinematic_frame CinematicFrames[NumCinematicFrames]; // (NumCinematicFrames * 16 bytes)
uint16_t NumDemoData; // number of demo data records to follow (2 bytes)
uint8_t DemoData[NumDemoData]; // demo data (NumDemoData bytes)
int16_t SoundMap[256]; // sound map (512 bytes)
uint32_t NumSoundDetails; // number of sound-detail records to follow (4 bytes)
tr2_sample_info SoundDetails[NumSoundDetails]; // sound-detail list (NumSoundDetails * 8 bytes)
uint32_t NumSamples (number of uint8_t's in Samples)
uint8_t Samples (array of uint8_t's -- embedded sound samples in Microsoft WAVE format)
uint32_t NumSampleIndices; // number of sample indices to follow (4 bytes)
uint32_t SampleIndices[NumSampleIndices]; // sample indices (NumSampleIndices * 4 bytes)
----

The Entire TR2 Level Format
~~~~~~~~~~~~~~~~~~~~~~~~~~~

What follows is the physical `.TR2` file layout, byte for byte.

CAUTION: This is not a ``real'' C/C++ structure, in that some arrays are variable-length, with the length being defined by another element of the structure.

[source,cpp]
----
uint32_t Version; // version (4 bytes)
tr_colour Palette[256]; // 8-bit palette (768 bytes)
tr_colour4 Palette16[256]; //  (1024 bytes)
uint32_t NumTextiles; // number of texture tiles (4 bytes)
tr2_textile8 Textile8[NumTextiles]; // 8-bit (palettized) textiles (NumTextiles * 65536 bytes)
tr2_textile16 Textile16[NumTextiles]; // 16-bit (ARGB) textiles (NumTextiles * 131072 bytes)
uint32_t Unused; // 32-bit unused value (4 bytes)
uint16_t NumRooms; // number of rooms (2 bytes)
virtual struct
{
    tr2_room_info RoomInfo; // room header (16 bytes)
    uint32_t NumData; // number of data uint16_t's to follow (=RoomData) (4 bytes)
    virtual struct
    {
        uint16_t NumVertices; // number of vertices to follow (2 bytes)
        tr2_vertex_room Vertices[NumVertices]; // vertex list (NumVertices * 12 bytes)
        uint16_t NumRectangles; // number of rectangles to follow (2 bytes)
        tr_face4 Rectangles[NumRectangles]; // rectangle list (NumRectangles * 10 bytes)
        uint16_t NumTriangles; // number of triangles to follow (2 bytes)
        tr_face3 Triangles[NumTriangles]; // triangle list (NumTriangles * 8 bytes)
        uint16_t NumSprites; // number of sprites to follow (2 bytes)
        tr2_room_sprite Sprites[NumSprites]; // room sprite list (NumSprites * 4 bytes)
        uint16_t NumDoors; // number of doors to follow (2 bytes)
        tr2_room_door Doors[NumDoors]; // door list (NumDoors * 32 bytes)
        uint16_t NumZsector; // sector table width (2 bytes)
        uint16_t NumXsector; // sector table height (2 bytes)
        tr2_room_sector SectorData[NumZsector * NumXsector]; // sector table (NumZsector * NumXsector * 8 bytes)
        int16_t Intensity1;
        int16_t Intensity2;
        int16_t LightMode;
        uint16_t NumLights; // number of lights to follow (2 bytes)
        tr2_room_light Lights[NumLights]; // light list (NumLights * 24 bytes)
        uint16_t NumStaticMeshes; // number of static mesh records to follow (2 bytes)
        tr2_room_staticmesh StaticMeshes[NumStaticMeshes]; // static mesh data (NumStaticMeshes * 20 bytes)
        int16_t AlternateRoom; // (2 bytes)
        uint16_t Flags; // (2 bytes)
    } RoomData;
} Rooms[NumRooms];
uint32_t NumFloorData; // number of floor data uint16_t's to follow (4 bytes)
uint16_t FloorData[NumFloorData]; // floor data (NumFloorData * 2 bytes)
uint32_t NumMeshData; // number of uint16_t's of mesh data to follow (=Meshes[]) (4 bytes)
virtual struct
{
    tr2_vertex Centre; // relative coordinates of mesh centre (6 bytes)
    uint8_t Unknown1[4]; // unknown (4 bytes)
    int16_t NumVertices; // number of vertices to follow (2 bytes)
    tr2_vertex Vertices[NumVertices]; // list of vertices (NumVertices * 6 bytes)
    int16_t NumNormals; // number of normals to follow (2 bytes)
    tr2_vertex Normals[NumNormals]; // list of normals (NumNormals * 6 bytes) (becomes Lights if NumNormals < 0; 2 bytes)
    int16_t NumTexturedRectangles; // number of textured rectangles to follow (2 bytes)
    tr_face4 TexturedRectangles[NumTexturedRectangles]; // list of textured rectangles (NumTexturedRectangles * 10 bytes)
    int16_t NumTexturedTriangles; // number of textured triangles to follow (2 bytes)
    tr_face3 TexturedTriangles[NumTexturedTriangles]; // list of textured triangles (NumTexturedTriangles * 8 bytes)
    int16_t NumColouredRectangles; // number of coloured rectangles to follow (2 bytes)
    tr_face4 ColouredRectangles[NumColouredRectangles]; // list of coloured rectangles (NumColouredRectangles * 10 bytes)
    int16_t NumColouredTriangles; // number of coloured triangles to follow (2 bytes)
    tr_face3 ColouredTriangles[NumColouredTriangles]; // list of coloured triangles (NumColouredTriangles * 8 bytes)
} Meshes[NumMeshPointers]; // note that NumMeshPointers comes AFTER Meshes[]
uint32_t NumMeshPointers; // number of mesh pointers to follow (4 bytes)
uint32_t MeshPointers[NumMeshPointers]; // mesh pointer list (NumMeshPointers * 4 bytes)
uint32_t NumAnimations; // number of animations to follow (4 bytes)
tr2_animation Animations[NumAnimations]; // animation list (NumAnimations * 32 bytes)
uint32_t NumStateChanges; // number of state changes to follow (4 bytes)
tr2_state_change StateChanges[NumStateChanges]; // state-change list (NumStructures * 6 bytes)
uint32_t NumAnimDispatches; // number of animation dispatches to follow (4 bytes)
tr2_anim_dispatch AnimDispatches[NumAnimDispatches]; // animation-dispatch list list (NumAnimDispatches * 8 bytes)
uint32_t NumAnimCommands; // number of animation commands to follow (4 bytes)
tr2_anim_command AnimCommands[NumAnimCommands]; // animation-command list (NumAnimCommands * 2 bytes)
uint32_t NumMeshTrees; // number of MeshTrees to follow (4 bytes)
tr2_meshtree MeshTrees[NumMeshTrees]; // MeshTree list (NumMeshTrees * 4 bytes)
uint32_t NumFrames; // number of words of frame data to follow (4 bytes)
uint16_t Frames[NumFrames]; // frame data (NumFrames * 2 bytes)
uint32_t NumMoveables; // number of moveables to follow (4 bytes)
tr2_moveable Moveables[NumMoveables]; // moveable list (NumMoveables * 18 bytes)
uint32_t NumStaticMeshes; // number of StaticMesh data records to follow (4 bytes)
tr2_staticmesh StaticMeshes[NumStaticMeshes]; // StaticMesh data (NumStaticMesh * 32 bytes)
uint32_t NumObjectTextures; // number of object textures to follow (4 bytes)
tr2_object_texture ObjectTextures[NumObjectTextures]; // object texture list (NumObjectTextures * 20 bytes) (after AnimatedTextures in TR3)
uint32_t NumSpriteTextures; // number of sprite textures to follow (4 bytes)
tr2_sprite_texture SpriteTextures[NumSpriteTextures]; // sprite texture list (NumSpriteTextures * 16 bytes)
uint32_t NumSpriteSequences; // number of sprite sequences records to follow (4 bytes)
tr2_sprite_sequence SpriteSequences[NumSpriteSequences]; // sprite sequence data (NumSpriteSequences * 8 bytes)
uint32_t NumCameras; // number of camera data records to follow (4 bytes)
tr2_camera Cameras[NumCameras]; // camera data (NumCameras * 16 bytes)
uint32_t NumSoundSources; // number of sound source data records to follow (4 bytes)
tr2_sound_source SoundSources[NumSoundSources]; // sound source data (NumSoundSources * 16 bytes)
uint32_t NumBoxes; // number of box data records to follow (4 bytes)
tr2_box Boxes[NumBoxes]; // box data (NumBoxes * 8 bytes)
uint32_t NumOverlaps; // number of overlap records to follow (4 bytes)
uint16_t Overlaps[NumOverlaps]; // overlap data (NumOverlaps * 2 bytes)
int16_t Zones[10*NumBoxes]; // zone data (NumBoxes * 20 bytes)
uint32_t NumAnimatedTextures; // number of animated texture records to follow (4 bytes)
uint16_t AnimatedTextures[NumAnimatedTextures]; // animated texture data (NumAnimatedTextures * 2 bytes)
uint32_t NumItems; // number of items to follow (4 bytes)
tr2_item Items[NumItems]; // item list (NumItems * 24 bytes)
uint8_t LightMap[32 * 256]; // light map (8192 bytes)
uint16_t NumCinematicFrames; // number of cinematic frame records to follow (2 bytes)
tr2_cinematic_frame CinematicFrames[NumCinematicFrames]; // (NumCinematicFrames * 16 bytes)
uint16_t NumDemoData; // number of demo data records to follow (2 bytes)
uint8_t DemoData[NumDemoData]; // demo data (NumDemoData bytes)
int16_t SoundMap[370]; // sound map (740 bytes)
uint32_t NumSoundDetails; // number of sound-detail records to follow (4 bytes)
tr2_sample_info SoundDetails[NumSoundDetails]; // sound-detail list (NumSoundDetails * 8 bytes)
uint32_t NumSampleIndices; // number of sample indices to follow (4 bytes)
uint32_t SampleIndices[NumSampleIndices]; // sample indices (NumSampleIndices * 4 bytes)
----

The Entire TR3 Level Format
~~~~~~~~~~~~~~~~~~~~~~~~~~~

What follows is the physical Tomb Raider III `.TR2` file layout, byte for byte.

CAUTION: This is not a ``real'' C/C++ structure, in that some arrays are variable-length, with the length being defined by another element of the structure.

[source,cpp]
----
uint32_t Version; // version (4 bytes)
tr_colour Palette[256]; // 8-bit palette (768 bytes)
tr_colour4 Palette16[256]; //  (1024 bytes)
uint32_t NumTextiles; // number of texture tiles (4 bytes)
tr2_textile8 Textile8[NumTextiles]; // 8-bit (palettized) textiles (NumTextiles * 65536 bytes)
tr2_textile16 Textile16[NumTextiles]; // 16-bit (ARGB) textiles (NumTextiles * 131072 bytes) (absent from TR1)
uint32_t Unused; // 32-bit unused value (4 bytes)
uint16_t NumRooms; // number of rooms (2 bytes)
virtual struct
{
    tr2_room_info RoomInfo; // room header (16 bytes)
    uint32_t NumData; // number of data uint16_t's to follow (=RoomData) (4 bytes)
    virtual struct
    {
        uint16_t NumVertices; // number of vertices to follow (2 bytes)
        tr2_vertex_room Vertices[NumVertices]; // vertex list (NumVertices * 12 bytes)
        uint16_t NumRectangles; // number of rectangles to follow (2 bytes)
        tr_face4 Rectangles[NumRectangles]; // rectangle list (NumRectangles * 10 bytes)
        uint16_t NumTriangles; // number of triangles to follow (2 bytes)
        tr_face3 Triangles[NumTriangles]; // triangle list (NumTriangles * 8 bytes)
        uint16_t NumSprites; // number of sprites to follow (2 bytes)
        tr2_room_sprite Sprites[NumSprites]; // room sprite list (NumSprites * 4 bytes)
        uint16_t NumDoors; // number of doors to follow (2 bytes)
        tr2_room_door Doors[NumDoors]; // door list (NumDoors * 32 bytes)
        uint16_t NumZsector; // sector table width (2 bytes)
        uint16_t NumXsector; // sector table height (2 bytes)
        tr2_room_sector SectorData[NumZsector * NumXsector]; // sector table (NumZsector * NumXsector * 8 bytes)
        int16_t Intensity1;
        int16_t Intensity2;
        uint16_t NumLights; // number of lights to follow (2 bytes)
        tr2_room_light Lights[NumLights]; // light list (NumLights * 24 bytes)
        uint16_t NumStaticMeshes; // number of static mesh records to follow (2 bytes)
        tr2_room_staticmesh StaticMeshes[NumStaticMeshes]; // static mesh data (NumStaticMeshes * 20 bytes)
        int16_t AlternateRoom; // (2 bytes)
        uint16_t Flags; // (2 bytes)
        tr_colour RoomLightColour // 3 bytes
    } RoomData;
} Rooms[NumRooms];
uint32_t NumFloorData; // number of floor data uint16_t's to follow (4 bytes)
uint16_t FloorData[NumFloorData]; // floor data (NumFloorData * 2 bytes)
uint32_t NumMeshData; // number of uint16_t's of mesh data to follow (=Meshes[]) (4 bytes)
virtual struct
{
    tr2_vertex Centre; // relative coordinates of mesh centre (6 bytes)
    uint8_t Unknown1[4]; // unknown (4 bytes)
    int16_t NumVertices; // number of vertices to follow (2 bytes)
    tr2_vertex Vertices[NumVertices]; // list of vertices (NumVertices * 6 bytes)
    int16_t NumNormals; // number of normals to follow (2 bytes)
    tr2_vertex Normals[NumNormals]; // list of normals (NumNormals * 6 bytes) (becomes Lights if NumNormals < 0; 2 bytes)
    int16_t NumTexturedRectangles; // number of textured rectangles to follow (2 bytes)
    tr_face4 TexturedRectangles[NumTexturedRectangles]; // list of textured rectangles (NumTexturedRectangles * 10 bytes)
    int16_t NumTexturedTriangles; // number of textured triangles to follow (2 bytes)
    tr_face3 TexturedTriangles[NumTexturedTriangles]; // list of textured triangles (NumTexturedTriangles * 8 bytes)
    int16_t NumColouredRectangles; // number of coloured rectangles to follow (2 bytes)
    tr_face4 ColouredRectangles[NumColouredRectangles]; // list of coloured rectangles (NumColouredRectangles * 10 bytes)
    int16_t NumColouredTriangles; // number of coloured triangles to follow (2 bytes)
    tr_face3 ColouredTriangles[NumColouredTriangles]; // list of coloured triangles (NumColouredTriangles * 8 bytes)
} Meshes[NumMeshPointers]; // note that NumMeshPointers comes AFTER Meshes[]
uint32_t NumMeshPointers; // number of mesh pointers to follow (4 bytes)
uint32_t MeshPointers[NumMeshPointers]; // mesh pointer list (NumMeshPointers * 4 bytes)
uint32_t NumAnimations; // number of animations to follow (4 bytes)
tr2_animation Animations[NumAnimations]; // animation list (NumAnimations * 32 bytes)
uint32_t NumStateChanges; // number of state changes to follow (4 bytes)
tr2_state_change StateChanges[NumStateChanges]; // state-change list (NumStructures * 6 bytes)
uint32_t NumAnimDispatches; // number of animation dispatches to follow (4 bytes)
tr2_anim_dispatch AnimDispatches[NumAnimDispatches]; // animation-dispatch list list (NumAnimDispatches * 8 bytes)
uint32_t NumAnimCommands; // number of animation commands to follow (4 bytes)
tr2_anim_command AnimCommands[NumAnimCommands]; // animation-command list (NumAnimCommands * 2 bytes)
uint32_t NumMeshTrees; // number of MeshTrees to follow (4 bytes)
tr2_meshtree MeshTrees[NumMeshTrees]; // MeshTree list (NumMeshTrees * 4 bytes)
uint32_t NumFrames; // number of words of frame data to follow (4 bytes)
uint16_t Frames[NumFrames]; // frame data (NumFrames * 2 bytes)
uint32_t NumMoveables; // number of moveables to follow (4 bytes)
tr2_moveable Moveables[NumMoveables]; // moveable list (NumMoveables * 18 bytes)
uint32_t NumStaticMeshes; // number of StaticMesh data records to follow (4 bytes)
tr2_staticmesh StaticMeshes[NumStaticMeshes]; // StaticMesh data (NumStaticMesh * 32 bytes)
uint32_t NumSpriteTextures; // number of sprite textures to follow (4 bytes)
tr2_sprite_texture SpriteTextures[NumSpriteTextures]; // sprite texture list (NumSpriteTextures * 16 bytes)
uint32_t NumSpriteSequences; // number of sprite sequences records to follow (4 bytes)
tr2_sprite_sequence SpriteSequences[NumSpriteSequences]; // sprite sequence data (NumSpriteSequences * 8 bytes)
uint32_t NumCameras; // number of camera data records to follow (4 bytes)
tr2_camera Cameras[NumCameras]; // camera data (NumCameras * 16 bytes)
uint32_t NumSoundSources; // number of sound source data records to follow (4 bytes)
tr2_sound_source SoundSources[NumSoundSources]; // sound source data (NumSoundSources * 16 bytes)
uint32_t NumBoxes; // number of box data records to follow (4 bytes)
tr2_box Boxes[NumBoxes]; // box data (NumBoxes * 8 bytes)
uint32_t NumOverlaps; // number of overlap records to follow (4 bytes)
uint16_t Overlaps[NumOverlaps]; // overlap data (NumOverlaps * 2 bytes)
int16_t Zones[10*NumBoxes]; // zone data (NumBoxes * 20 bytes)
uint32_t NumAnimatedTextures; // number of animated texture records to follow (4 bytes)
uint16_t AnimatedTextures[NumAnimatedTextures]; // animated texture data (NumAnimatedTextures * 2 bytes)
uint32_t NumObjectTextures; // number of object textures to follow (4 bytes) (after AnimatedTextures in TR3)
tr2_object_texture ObjectTextures[NumObjectTextures]; // object texture list (NumObjectTextures * 20 bytes)
uint32_t NumItems; // number of items to follow (4 bytes)
tr2_item Items[NumItems]; // item list (NumItems * 24 bytes)
uint8_t LightMap[32 * 256]; // light map (8192 bytes)
uint16_t NumCinematicFrames; // number of cinematic frame records to follow (2 bytes)
tr2_cinematic_frame CinematicFrames[NumCinematicFrames]; // (NumCinematicFrames * 16 bytes)
uint16_t NumDemoData; // number of demo data records to follow (2 bytes)
uint8_t DemoData[NumDemoData]; // demo data (NumDemoData bytes)
int16_t SoundMap[370]; // sound map (740 bytes)
uint32_t NumSoundDetails; // number of sound-detail records to follow (4 bytes)
tr2_sample_info SoundDetails[NumSoundDetails]; // sound-detail list (NumSoundDetails * 8 bytes)
uint32_t NumSampleIndices; // number of sample indices to follow (4 bytes)  +
uint32_t SampleIndices[NumSampleIndices]; // sample indices (NumSampleIndices * 4 bytes)
----

The Entire TR4 Level Format
~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTE: Needs to be written.

The Entire TR5 Level Format
~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTE: Needs to be written.

Itemized Differences between TR1 and TR2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* TR1 has no colour table or 16-bit palette before the start of the textures; it also lacks 16-bit textures.
* In TR1, `tr2_room_vertex` has after its `tr_vertex` struct only the first light intensity, and not the attributes or the second intensity.
* In TR1, after SectorData, there is only the first light intensity, and not the second one or the lighting mode.
* In TR1, tr2_room_light_struct has only one of:
** uint16_t Diffuse1/2
** uint32_t Unknown1/2
* In TR1, tr2_room_static does not have two light intensities, but only one.
* ``Boxes'' objects are rectangles whose four horizontal-coordinate values are ++uint8_t++s in TR2 and ++int32_t++'s in TR1.
* ``Zones'' objects have 10 ++int16_t++s in TR2, but 6 ++int16_t++s in TR1
* In TR1, `tr2_item_struct` is like the TR2 version, but with only one light intensity.
* The TR1 colour table has the same format as the TR2 colour table, but it is located between the LightMap and the cinematic frames.
* SoundMap is 370 ++int16_t++s in TR2, but 256 ++int16_t++s in TR1.
* Between SoundDetails and SampleIndices, TR1 has all the level's sound samples, in the form of embedded Microsoft WAVE files. Just before these samples is the
  total number of bytes in those sound samples, which is a int32_t.

Itemized Differences between TR2 and TR3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* After the two room-light intensities, TR2 has a lighting-mode value, which TR3 lacks.
* Also in `tr3_room`, TR3 has 3 extra bytes at the end, which are `WaterScheme`, `ReverbInfo` and null filler.
* Finally, in TR2, the `tr_object_texture` data is before the `tr_sprite_texture` data. In TR3, it is before the `tr2_item` data.

Itemized Differences between TR3 and TR4
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* There are no more 8-bit and 16-bit palettes.
* There are no more 8-bit textures.
* There are now 32-bit textures.
* Texture tiles are now divided into three parts: _non-bumped room texture tiles_, _model texture tiles_ and _bumped room texture tiles_.
* Level file divided in several chunks, with each chunk compressed using _zlib_:
** Chunk 1: 32-bit texture tiles.
** Chunk 2: 16-bit texture tiles.
** Chunk 3: 32-bit _sky and font graphics_.
** Chunk 4: Level data.
* Each compressed chunk is preceded by its _uncompressed size_ and _compressed size_ ++uint32_t++s.
* After last compressed chunk, there are now all audio samples, sequentially stored in this manner:

[source,cpp]
----
struct tr4_sample
{
    uint32_t  UncompressedSize;
    uint32_t  CompressedSize;
        char  WaveFile[];       // Embedded sample in MS-ADPCM or PCM WAV format.
}
----

* Room Light structure has completely changed:
** Colour is no longer stored in <<tr_colour4>> format, rather <<tr_colour>>.
** There is new field `LightType`, which specifies light mode or fog bulb mode.
** After `LightType`, there is a `uint8_t Filler` value of `0xFF`.
** `Intensity` is now `uint8_t`.
** Instead of `Fade`, there is a set of 4 float values: `In`, `Out`, `Length` and `CutOff`.
** There are also three float values defining _light direction_.

* There are now two dedicated structures for _mesh faces_, bearing extra field `Lighting`.
* There is now _FlybyCameras_ block before _SoundSources_ block.
* _Cinematic Frames_ are replaced with _AI Data_ block.
* Meaning of fields in <<tr_sprite_texture>> has changed.
* In addition, the `NumSpriteTextures` field is preceeded by the 3 ASCII bytes `SPR`.
* Meshes have no longer colored tris / quads. So, `NumColoredRectangles`, `ColoredRectangles[]`, `NumColoredTriangles`, `ColoredTriangles[]` no longer exist in the tr4_mesh structure. 
* The `NumObjectTextures` field is now preceeded by 4 ASCII bytes `\0TEX`
* <<tr4_object_texture>> struct is used instead of <<tr_object_texture>>.
* <<tr4_animation>> struct is used instead of <<tr_animation>>.

* There is no lightmap.
* TR4 levels have an additional 6 bytes at the end of the uncompressed _Level data_ that seem to be always 0.


Itemized Differences between TR4 and TR5
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* There is no more _bumped room texture tiles_ block.
* There are now two extra `uint16_t` values after last texture block specifying _Lara type_ and _weather type_. Weather type may be either _0_ (no weather), _1_ (raining) or _2_ (snowing).
* Also, it is followed by 28 bytes zero padding.
* _uncompressed size_ and _compressed size_ `uint32_t` values for _Level data_ block are equal (reason below).
* _Level data_ block is not compressed.
* <<tr5_room>> struct is used instead of <<tr4_room>>.
* <<tr5_room_info>> struct is used instead of <<tr_room_info>>.
* <<tr5_room_vertex>> struct is used instead of <<tr4_room_vertex>>.
* <<tr5_room_light>> struct is used instead of <<tr4_room_light>>.
* Each [[tr4_object_texture]] ends with extra null `uint16_t` value.
* SoundMap is 450 ++int16_t++s in TR5, but 370 ++int16_t++s in TR4.

Itemized Differences between ``normal'' TRs and Demos
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Presumably as a form of copy protection, the demo versions of some of the TR games use levels that are slightly different from those in the retail versions.
  However, those that have been found are all data rearrangements, as explained below.
* The TR1 and Unfinished Business (`.TUB`) demos have their palettes moved to between the SpriteSequences and the Cameras.
* The TR2 ``Wall'' demo, and maybe also its ``Venice'' demo, has its LightMap (8K) moved to between the SpriteSequences and the Cameras. It also has its
  SampleIndices content replaced by the soundfiles, though the associated number of them remains unchanged (the number of indices becomes the number of samples).
* That demo also has its own version of `TOMBPC.DAT`, called `DEMOPC.DAT`, which appears to have the exact same format as `TOMBPC.DAT`.

No rearrangements are known for the TR3 demos.
