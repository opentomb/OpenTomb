[[FloorData]]
FloorData
---------

Overview
~~~~~~~~

The _FloorData_ is the key part of the level structure, which defines almost everything related to ``physical'' world  -- geometry, interaction and response of
a level. While _room geometry_ (see above) may be considered as a ``face'' of the level, _FloorData_ is its ``heart'' and ``brain''.

Distinctive feature of the FloorData is its _serialized nature_. While in room geometry you can easily jump through structures using data sizes and pointers to
get the needed part, _FloorData_ require sequential parsing, one unit by one.

The Concept
~~~~~~~~~~~

The _FloorData_ defines special sector attributes such as individual floor and ceiling _corner heights_ (slopes), _collisional_ portals to other rooms,
_climbability_ of walls, and, most important of all, _the various types of triggering_. Each room sector (see <<tr_room_sector>> structure) points to the
FloorData using `FDIndex` variable. It is referenced as an array of _16-bit unsigned integers_ (++uint16++s).

Therefore, the _current `tr_room_sector` offset_ (not yet the FloorData pointer itself!) is calculated using this formula:

[width="100%",cols="^",frame="none",align="center",style="asciidoc"]
|====
|latexmath:[$S_{Offset} = (((X_{current} - X_{room}) / 1024) \times n_{Zsectors}) + ((Z_{current} - Z_{room}) / 1024)$]
|====

...where latexmath:[$X_{current}$] and latexmath:[$Z_{current}$] are current player positions, latexmath:[$X_{room}$] and latexmath:[$Z_{room}$] are
corresponding `tr_room_info.x` and `tr_room_info.z` fields, and latexmath:[$n_{Zsectors}$] is `tr_room.NumZsectors` value.

Then, the _current FloorData pointer_ is derived from calculated `tr_room_sector` structure's `FDIndex` field. In other words, `FDindex` is an offset into the
`FloorData[]` array.

As mentioned above, The FloorData consists of solely `uint16_t` entries without general structure -- the way engine treats specific entry depends on the
sequence order and type of previously parsed entries. While it's a bit difficult to understand it at first, you should get used to it. Main thing to remember is
the FloorData should be read sequentially.

Understanding The Setup
~~~~~~~~~~~~~~~~~~~~~~~

_First order_ of FloorData entries has a common ``bitwise'' structure, which we will call `FDSetup`. The structure could be divided into three fields:

[width="50%",cols="^,^",align="center"]
|=======================================
| `Function`     | bits 0..4 (`0x001F`)
| `SubFunction`  | bits 8..14 (`0x7F00`)
| `EndData`      | bit 15 (`0x8000`)
|=======================================

`Function` defines the type of action that must be done with current FloorData entry, and `SubFunction` is usually used in that action's conditions and case
switches (if there are any). If there are no any special conditions for a given `Function`, then `SubFunction` _is not used_.

TIP: When parsing `FDSetup` for TR3, use only the lower 5 bits (0..4) to find the `Function` value, because some of TR3 _triangulation functions_ use the upper
3 bits of the lower byte for other purpose. However, this will also work correctly in TR1 and TR2.

If `EndData` is set, there should be no more _similar_ FloorData entries (after the current one) in the `FloorData[]` array -- so further parsing must be
stopped.  Otherwise, the following `uint16_t` should be interpreted after the current one in the same manner.

NOTE: Even if `EndData` is set, it doesn't specifically mean that there are no more `uint16_t` following the current one at all. As we will see, some FloorData
functions and subfunctions require to parse additional entries with their own rules. In programming terms, `EndData` just indicates that parsing loop must be
broken -- however, there may be following code which reads additional entries.

NOTE: While `FloorData` index 0 means the sector does not use floordata, there is still a ``dummy'' entry for index 0. This dummy entry doesn't contain any
useful information.

NOTE: Several of the functions indicate adjustments to the sector's _corner heights_. The corners will be denoted as `00`, `01`, `10`, and `11`, where the first
digit is the corner's X coordinate and the second digit is the corner's Z coordinate, with both given as multiples of 1024.

FloorData Functions
~~~~~~~~~~~~~~~~~~~

Function `0x01` -- Portal Sector
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

_SubFunction is not used_

The _next_ `FloorData` entry is the number of the room that this sector is a collisional portal to. An entity that arrives in a sector with this function
present will gets its room membership changed to provided room number, without any change in position.

To understand what exactly happens when room membership is changed, you must understand how collisional portals work in Tomb Raider's 4D space. When two rooms
are connected with portal, it means that they also _overlap_ within a distance of two sectors (because these sectors contain portal in each of the connected
rooms). This way, when room is changed, it remains unnoticed by the player, cause portal sectors are interconnected:

[width="70%",cols="^",frame="none",align="center"]
|====
| image:illustrations/doors.png[title="Floor sector triangulation types"]
| _Collisional portal layout. Blue sectors are walls around each room. Green sector is Room 2's collisional portal to Room 1, and dark blue sector is Room 1's
  collisional portal to Room 2_
|====

Function `0x02` -- Floor Slant
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

_SubFunction is not used_

The next `FloorData` entry contains two `uint8_t` _slant values_ for the _floor_ of this sector. Slant values are specified in increments of 256 units
(so-called _clicks_ in TRLE terms). The high byte is the _Z slope_, while the low byte is the _X slope_. If the X slope is greater than zero, then its value is
added to the floor heights of corners `00` and `01`. If it is less than zero, then its value is subtracted from the floor heights of corners `10` and `11`. If
the Z slope is greater than zero, then its value is added to the floor heights of corners `00` and `10`. If it is less than zero, then its value is subtracted
from the floor heights of corners `01` and `11`.

NOTE: This function is never combined with _triangulation_ functions present in TR3 onwards (see further).

Function `0x03` -- Ceiling Slant
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

_SubFunction is not used_

The next `FloorData` entry contains two `uint8_t` _slant values_ for the _ceiling_ of this sector. Slant values are specified in increments of 256 units. The
high byte is the _Z slope_, while the low byte is the _X slope_. If the X slope is greater than zero, then its value is subtracted from the ceiling heights of
corners `10` and `11`. If it is less than zero, then its value is added to the ceiling heights of corners `00` and `01`. If the Z slope is greater than zero,
then its value is subtracted from the ceiling heights of corners `00` and `10`. If it is less than zero, then its value is added to the ceiling heights of
corners `01` and `11`.

NOTE: This function is never combined with _triangulation_ functions present in TR3 onwards (see further).

Function `0x04` -- Trigger
^^^^^^^^^^^^^^^^^^^^^^^^^^

The `uint16_t` immediately following current entry is called `TriggerSetup`, and contains general trigger properties stored in a ``bitwise'' manner:

[width="30%",cols="1,2",align="center"]
|====
| `Timer`     | bits 0..7 (`0x00FF`)
| `OneShot`   | bit 8 (`0x0100`)
| `Mask`      | bits 9..13 (`0x3E00`)
|====

`Timer` is a value generally used for making _timed triggers_ of certain entities -- for example, the door which opens only for a few seconds and then closes,
or a fire which extinguishes and then burns again. In such case, engine _copies timer value in corresponding field of each triggered entity_. Then each entity's
timer begins to count time back, and when it reaches zero, entity deactivates.

However, it's not the only purpose of `Timer` field. As trigger may not specifically activate entities but do some other actions, `Timer` field may be re-used
as a general-purpose numerical field to specify particular trigger behaviour. We will mention it separately for such trigger actions.

NOTE: Since TR4, `Timer` field became _signed_, i.e. it may contain _negative values_. Effectively, it means that entities activated with such trigger won't be
immediately activated and then deactivated after given amount of time, but _wait for a given time before being activated_. Most prominent example is timed spike
pit in the beginning of ``Burial Chambers''.

`Mask`: The five bits at `0x3E00` are the so-called _Trigger Mask_. The purpose of trigger mask is to create puzzle set-ups which require a combination of
activated triggers to achieve certain result. A good example of trigger mask use is the multiple-switch room of ``Palace Midas'' in TR1.

[NOTE]
====
Each entity in Tomb Raider has a similar field in its structure called _activation mask_. Activation of entity happens _only when all bits of activation mask
are set_. Trigger action which activates an entity makes either bitwise `XOR` operation (for _switch_ trigger types -- namely, _switch_ and _heavy switch_ --
see further) or bitwise `OR` operation on _activation mask_ using _trigger mask_. Trigger action purposed for deactivation (namely, _antitrigger_, _antipad_ and
_heavy antitrigger_ types) don't take its trigger mask into consideration, and instead just reset target entity's activation mask to zero.

Whenever entity's activation mask is changed to anything but 0x1F (all bits set), entity is _automatically deactivated_, excluding the cases when `OneShot` flag
was previously set for a given entity -- see further.
====

`OneShot` flag is used _only_ for activation of entities (it is also copied to entity's own flag field with same name), and indicates that _after activation,
entity state is locked_. It means that even if entity's own activation mask is unset (as with _switch_ trigger type -- see further), entity will remain
activated. However, it doesn't mean that entity couldn't be deactivated at all -- because _antitrigger_ trigger type ignores and resets this flag.

NOTE: All other trigger actions, except activation of entities, are _performed continuously_. It's not obvious, because engine uses various workarounds for
specific trigger actions to prevent ``repeated'' execution, like playing same soundtracks over and over again. Such workarounds will be specifically mentioned.

_Trigger types_ and _trigger actions_ will be described separately right after listing all FloorData functions.

Function `0x05` -- Kill Lara
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

_SubFunction not used_

Instantly kills Lara. Usually she is simply set on fire, however, there is one special case in TR3. If current level index is 7 (``Madubu Gorge''), then instead
of catching fire, Lara will play drowning animation.

Function `0x06` -- Climbable Walls
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

{TR2}{TR3}{TR4}{TR5} The `SubFunction` indicates climbability of walls; its value is the bitwise `OR` of the values associated with all the climbable-wall
directions (`0x01` = +Z, `0x02` = +X, `0x04` = -Z, `0x08` = -X), e.g. SubFunction `0x09` indicates that the walls on both the +Z and -X sides of this sector are
climbable.

Functions `0x07` to `0x12` -- Triangulation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

{TR3}{TR4}{TR5} Beginning with TR3, geometry layout of each sector was significantly changed. Engine introduced _triangles_ as a minimal collisional unit,
compared with _rectangles only_ in TR1 and TR2. This advantage allowed to create much more organic and natural terrain (albeit still limited by minimal sector
width and depth of 1024 units), but also complicated things a lot, introducing the whole new set of different FloorData collisional functions.

NOTE: _Triangulation_ functions are never combined with _slant_ functions present in TR1 and TR2. Each sector has either _slant_ or _triangulation_ function
assigned to it, and _never both of them_. If there ever will be a paradoxical case of combination, most likely, only _older_ function (i.e. _slant_) will be
considered for collision calculation.

Similarly to _slant_ functions, _triangulation_ functions define the floor and ceiling corner heights, but besides, they also specify _dividing up the floors
and ceilings into triangles along either of the two diagonals_. Also, one of the triangles may be a collisional portal to the room above (if in the ceiling) or
to the room below (if in the floor).

Each triangulation function `uint16_t` must be parsed differently, not like ordinary `FDSetup` entry:

[width="40%",cols="1,2",align="center"]
|====
| Function                     | Bits 0..4 (`0x001F`)
| latexmath:[$H_{\triangle1}$]  | Bits 5..9 (`0x03E0`)
| latexmath:[$H_{\triangle2}$]  | Bits 10..14 (`0x7C00`)
| EndData                      | Bit 15 (`0x8000`)
|====

latexmath:[$H_{\triangle1}$] and latexmath:[$H_{\triangle2}$] are signed values, and replace `FDSetup`'s `SubFunction` field.

Own triangulation function's `uint16_t` is followed by _one extra_ `uint16_t` to be parsed as follows:

[width="40%",cols="1,2",align="center"]
|====
| latexmath:[$\DeltaC_{10}$]  | Bits 0..3 (`0x000F`)
| latexmath:[$\DeltaC_{00}$]  | Bits 4..7 (`0x00F0`)
| latexmath:[$\DeltaC_{01}$]  | Bits 8..11 (`0x0F00`)
| latexmath:[$\DeltaC_{11}$]  | Bits 12..15 (`0xF000`)
|====

All four values here are unsigned.

The Triangulation Formula
+++++++++++++++++++++++++

The idea behind this set up is dividing each sector rectangle into _two independent triangles_, and adjust each triangle height by combination of _corner_ and
_triangle_ heights.  To get each triangle's individual corner height, you should use this formula:

[width="100%",cols="^",frame="none",align="center",style="asciidoc"]
|====
|latexmath:[$H_{\angle} = H_{floor} + (\max(\DeltaC_{10}, \DeltaC_{00}, \DeltaC_{01}, \DeltaC_{11}) - \DeltaC_{n} \times 1024 )$]
|====

...where latexmath:[$H_{\angle}$] is _absolute floor height_ specified in `tr_room_sector`'s `Floor` field, and latexmath:[$\DeltaC_{n}$] is triangle's
individual corner height.

While four corner height values are shared by both triangles, _triangle height values specify additional overall height of individual triangle_. Therefore,
sector corner heights may or may not be shared between two triangles:

[width="80%",cols="^,^",frame="none",align="center"]
|====
| image:illustrations/tri-notshared.png[title="Corner heights are not shared"] | image:illustrations/tri-shared.png[title="Corner heights are shared"]
| _Corner heights are not shared_ | _Corner heights are shared_
|====

The way engine interprets _triangle height values_ latexmath:[$H_{\triangle1}$] and latexmath:[$H_{\triangle2}$] is not exactly known -- however, _meta2tr_
understands them and uses them to create so-called _diagonal steps_, example of which is pictured on the left side. There is no case of diagonal steps in
original games, but they may exist in levels edited with _meta2tr_.

Overall, there are 12 different triangulation functions, which can be divided into two pairs of groups -- one pair of groups is for floor, and another pair is
for ceiling. Each pair is categorized by _split direction_, and each group is categorized if it's floor or ceiling. In each group, there are three functions --
first function denotes that _both_ triangles in sector are solid, second and third functions denote that _one of triangles is a collisional vertical portal_.
When function denotes a vertical portal, target room of a portal is taken from `tr_room_sector` structure -- `RoomBelow` for floor functions, and `RoomAbove`
for ceiling functions.

Here is an example illustration depicting sectors with all possible floor triangulation functions. Ceiling triangulation happens in similar manner.

[width="100%",cols="^",frame="none",align="center"]
|====
| image:illustrations/tri-types.png[title="Floor sector triangulation types"]
| _Floor sector triangulation types._
  _Black triangles depict vertical collisional portal to different room._
|====

`X` axis in world coordinates also may be considered _north_ for more simple reference (because you can always check compass direction in actual game engines,
at least in TR1 and TR4).

Functions `0x07`, `0x0B`, `0x0C`
++++++++++++++++++++++++++++++++

These functions define _floor_ triangles split in the _northwest-southeast_ direction.

* `0x07` -- Both triangles are solid.
* `0x0B` -- Triangle pointing its right angle to the _southwest_ is a _collisional portal_.
* `0x0C` -- Triangle pointing its right angle to the _northeast_ is a _collisional portal_.

Functions `0x08`, `0x0D`, `0x0E`
++++++++++++++++++++++++++++++++

These functions define _floor_ triangles split in the _northeast-southwest_ direction.

* `0x08` -- Both triangles are solid.
* `0x0D` -- Triangle pointing its right angle to the _southwest_ is a _collisional portal_.
* `0x0E` -- Triangle pointing its right angle to the _northwest_ is a _collisional portal_.

Functions `0x09`, `0x0F`, `0x10`
++++++++++++++++++++++++++++++++

These functions define _ceiling_ triangles split in the _northwest_ direction.

* `0x09` -- Both triangles are solid.
* `0x0F` -- Triangle pointing its right angle to the _southwest_ is a _collisional portal_.
* `0x10` -- Triangle pointing its right angle to the _northeast_ is a _collisional portal_.

Functions `0x0A`, `0x11`, `0x12`
++++++++++++++++++++++++++++++++

These functions define _ceiling_ triangles split in the _northeast_ direction.

* `0x0A` -- Both triangles are solid.
* `0x11` -- Triangle pointing its right angle to the _northwest_ is a _collisional portal_.
* `0x12` -- Triangle pointing its right angle to the _southeast_ is a _collisional portal_.

Function `0x13` -- Monkeyswing (only in TR3-5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

_SubFunction is not used_

{TR3}{TR4}{TR5} Sets monkey-swingability of the ceiling in specified sector.

Function `0x14`
^^^^^^^^^^^^^^^

{TR3}{TR4}{TR5} This function has a different meaning in TR3 and TR4/5.

* In TR3, if Lara approaches sector with this FloorData function inside _minecart_ vehicle, it will turn _left_ 90 degrees, with a circle radius around 4
  sectors (4096 units in world coordinates).
* In TR4 and TR5, this function is used together with special entity called _Trigger Triggerer_. The purpose of this entity is to perform _deferred triggering_.
  That is, if _trigger_ FloorData function is placed in the same sector with function `0x14`, trigger won't be activated until there's an activated _Trigger
  Triggerer_ object in the same sector. This allows to create setups where player can cross trigger sector without activating it, until some other event occurs
  later in level.

Function `0x15`
^^^^^^^^^^^^^^^

{TR3}{TR4} This function has a different meaning in TR3 and TR4.

* In TR3, if Lara approaches sector with this FloorData function inside _minecart_ vehicle, it will turn _right_ 90 degrees, with a circle radius around 4
  sectors (4096 units in world coordinates).
* In TR4, this function is used together with special entity called _Mapper_. If _Mechanical Beetle_ is placed in sector with function `0x15` and inactive
  _Mapper_ entity, it rotates in the same direction _Mapper_ is pointing to, activates it, and then rolls forward, until next sector with function 0x14 is
  reached. Then it waits until Lara picks it up.

NOTE: If Lara places beetle at the very same sector where beetle was already used, it will shake and explode. It happens because beetle checks if _Mapper_
entity is active or not, and if it was already activated, it explodes instead of rolling.

Trigger types
~~~~~~~~~~~~~

A _trigger type_ specifies the condition of a given _trigger function_ to be activated. Condition may be a type of activator (Lara or some other entity), a
specific state of activator, specific trigger action (activate or deactivate), and so on.

Trigger type _is placed in `SubFunction` field_ of `FDSetup` structure, so we will refer to trigger types as _SubFunctions_.

NOTE: Trigger type names are directly borrowed from TRLE.

SubFunction `0x00` -- Trigger
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Activated by Lara whenever she enters a given sector -- either steps, climbs, jumps over it, and so on.

SubFunction `0x01` -- Pad
^^^^^^^^^^^^^^^^^^^^^^^^^

Activated by Lara _only_ if she steps or lands on a given sector.

SubFunction `0x02` -- Switch
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This particular type of trigger takes first `ActionList` entry's `Parameter` field _as a reference to specific switch entity in level_. It activates _every time
the switch state is changed_. For _Object_ trigger actions, _activation_ means _performing `XOR` operation_ on these object's (entities) activation masks. (See
next section for description of _Object_ trigger action and `Parameter` field.)

Please note that this trigger type (as well as _any other trigger types_) always perform all trigger actions except _Object_ in the same manner! Meaning, if
there is a _Camera_ or _Effect_ trigger action, it will be performed every time the switch is flipped on or off.

SubFunction `0x03` -- Key
^^^^^^^^^^^^^^^^^^^^^^^^^

Similar to previous trigger type, it works only if there is a _keyhole entity_ listed in the first `ActionList` entry's `Parameter` field. It activates only if
a key was inserted into that particular keyhole.

SubFunction `0x04` -- Pickup
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

As above, this type of trigger works only if there is a _pick-up entity_ listed in the first `ActionList` entry's `Parameter` field. It activates only if this
item was picked up by Lara.

SubFunction `0x05` -- Heavytrigger
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Activated by _specific entity type_ (activator) wherever it enters a specified sector. Entity types which are able to activate _heavytriggers_ are hardcoded,
and usually include _NPCs (enemies), rolling balls and pushable objects_. Since TR4, heavytriggers may also be activated by destroying _shatter static mesh_
which is placed in a given sector.

Note that heavytrigger _does not perform deactivation action_, if activator leaves trigger sector.

SubFunction `0x06` -- Antipad
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Same as _Pad_ -- activates only if Lara has landed or stepped onto a given sector. The difference is, _Antipad_ performs _deactivation_ for each case of
_Object_ trigger action. What _deactivation_ specifically means is it resets entity activation mask to zero (trigger mask is ignored), thus flipping entity
activation procedure.

As it was mentioned for _Switch_ trigger type, any other trigger actions beside _Object_ will perform exactly in the same manner as with normal trigger types.
So you shouldn't expect soundtrack to stop, if you have placed _PlayTrack_ trigger action for antipad.

SubFunction `0x07` -- Combat
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Activated by Lara whenever she enters a given sector _with her weapons drawn_. This trigger type was (presumably) never used in original games.

SubFunction `0x08` -- Dummy
^^^^^^^^^^^^^^^^^^^^^^^^^^^

This type doesn't perform _any trigger action_ listed for it except _Object_ type -- for these trigger actions, it _applies standable collision for Lara on a
given entities_, if such entities are in this trigger sector. For particular entity types, it works even if entity is deactivated (e.g. collapsing floor), but
for other types it works only if entity was activated (e.g. trapdoors). Selected behaviour is most likely hardcoded.

It's worth noting that _any_ trigger type will apply standable collision on such entity types, if they are in the same sector. It's not a bug, rather a way TR
engines process FloorData.

SubFunction `0x09` -- Antitrigger
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Same as _Trigger_, but performs _deactivation_ for each case of _Object_ trigger action.

SubFunction `0x0A` -- Heavy switch
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

{TR4}{TR5} Don't be fooled by the name of this trigger type. It is not literally a _switch_, as only similarity between it _switch_ type is XOR operation with
activation mask. In fact, this trigger performs action when _specific entity type_ (activator) enters a given trigger sector, but _only if trigger mask is equal
to activator's activation mask_.

The best example of heavy switch setup is _Planetarium_ in ``The Lost Library''. Trigger mask is only applied to raising block if pushable in trigger sector has
a similar activation mask.

SubFunction `0x0B` -- Heavy antitrigger
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

{TR4}{TR5} Same as _Antitrigger_, but performs _deactivation_ for each case of _Object_ trigger action.

SubFunction `0x0C` -- Monkey
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

{TR4}{TR5} Activated by Lara whenever she enters a given sector _in monkeyswing state_. Best example is locust swarm attacking Lara when she monkeyswings across
the street in ``Trenches''.

SubFunction `0x0D` -- Skeleton
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

{TR5} This trigger type temporarily replaces Lara model with a combination of models #25 (Lara skeleton), #26 (see-through body) and #27 (see-through joints).
See-through body and joints are applied on top of the skeleton model with additive blending.

SubFunction `0x0E` -- Tightrope
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

{TR5} Activated by Lara whenever she enters a given sector _walking on a tightrope_.

SubFunction `0x0F` -- Crawl
^^^^^^^^^^^^^^^^^^^^^^^^^^^

{TR5} Activated by Lara whenever she enters a given sector _crawling or crouching_.

SubFunction `0x10` -- Climb
^^^^^^^^^^^^^^^^^^^^^^^^^^^

{TR5} Activated by Lara whenever she enters a given sector _climbing on a wall_.

This concludes the description of _Trigger_ FloorData function _trigger types_.

Trigger actions
~~~~~~~~~~~~~~~

Trigger function references an additional list of FloorData entries called `ActionList`, which is a ``chain'' of entries that immediately follows `TriggerSetup`
entry. As you maybe already guessed, the `ActionList` contains the list of actions to be performed for a specified trigger.

`ActionList` entry format is:

[width="50%",cols="1,3",align="center"]
|====
| `Parameter`   | bits 0..9 (`0x03FF`) _-- Used bytes may vary_
| `TrigAction`  | bits 10..14 (`0x7C00`)
| `ContBit`     | bit 15 (`0x8000`)
|====

`TrigAction` is a type of action to be performed. These will be listed seperately.

`Parameter` is used with certain trigger actions which need a certain numerical argument provided to them.

`ContBit` flag meaning is similar to `EndData` flag described for `FDSetup` structure. It indicates if there is another `ActionList` entry after current one. If
`ContBit` is not set, it means we have reached the end of `ActionList`, and there's nothing more to do for a given trigger.

NOTE: If `ActionList`'s parent trigger type is either _Switch_ or _Key_, first entry of `ActionList` is used to get reference entity (switch or keyhole) index.
Hence, it is ignored here, as by the time engine reaches `ActionList` offset, its first entry is already parsed by preceding code.

NOTE: `ContBit` flag is _not the same_ as `EndData` flag! When writing a parser, do not overwrite one with another.

TrigAction `0x00` -- Object
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Activate or deactivate entity (object) with index specified in `Parameter`.

TrigAction `0x01` -- Camera
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Switches to camera. `Parameter` (bits 0..6 used) serves as index into `Cameras[]` array.

NOTE: Camera trigger action _uses one extra ++uint16_t++ entry_ after its own entry! Its format is:

[width="30%",cols="1,2",align="center"]
|======================================
| `Timer`    | bits 0..7 (`0x00FF`)
| `Once`     | bit 8 (`0x0100`)
| `Zoom`     | bit 12 (`0x1000`) _-- only in TR1-2_
| `ContBit`  | bit 15 (`0x8000`)
|======================================

`Timer` is a number of seconds to wait before automatically switching back to the normal camera. If 0, it never switches back to normal camera, as long as
trigger is active.

`Once`: If set, only switch to camera once; otherwise, switch to camera every time trigger is active.

`Zoom`: Camera smoothly zooms in when activated. Zoom amount is hardcoded.

NOTE: `ContBit` flag _overwrites_ the same flag from the preceding `ActionList` entry.

TrigAction `0x02` -- Underwater Current
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Continuously moves Lara to specifed _sink_. `Parameter` serves as index into `Cameras[]` array. If sink is placed lower than current sector absolute floor
height or upper than current sector absolute ceiling height, latexmath:[$Y$] coordinate will be ignored when dragging Lara to sink. Since TR3, sink also
prevents Lara from surfacing the water.

NOTE: While it may look like `Cameras[]` array was mentioned here by mistake, it is not. TR engines _share the same structure for both cameras and sinks_. The
way engine treats it in either case will be discussed in corresponding section.

TrigAction `0x03`: Flip Map
^^^^^^^^^^^^^^^^^^^^^^^^^^^

_FlipMap_ is an internal engine array of ++uint8_t++s which is used to determine if alternate rooms should be turned on or off (in TRLE terms, _flipped_). It uses
_trigger mask_ in the same manner as for _Object_ activation and deactivation, but in this case, alternate rooms are activated if given `FlipMap` entry mask is
set (`0x1F`), and deactivated, if `FlipMap` entry is not set (not `0x1F`).

This trigger action at first applies _trigger mask_ to a given `FlipMap` entry using `OR` bitwise operation and then immediately checks if it's already set or
not. If FlipMap entry is set, then it immediately switches rooms to alternate mode.

`Parameter` defines which `FlipMap` entry engine should refer to decide should it switch alternate rooms on or off. The size of `FlipMap` array is around 10
(judging by the number of unused `FLIP_MAPn` _effect_ entries), but in original levels, number usually never tops 2 or 3.

NOTE: From TR1 to TR3, `FlipMap` array was merely used as a ``hint table'' to tell the engine if it should flip _all rooms at once_. That is, to check and apply
another FlipMap entry, alternate rooms should have been reverted to previous state before -- that's the purpose of next two listed trigger actions. However, in
TR4 algorithm was changed -- each ``flippable'' room now bears additional parameter called ``alternate group'', which strictly tells an engine to flip it _only
when room alternate group is equal to FlipMap `Parameter` value_. This change in algorithm made next two trigger actions unnecessary in TR4-5 (however, they are
still available).

TrigAction `0x04` --  Flip On
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Tries to turn alternate rooms _on_, judging on current value of a given `FlipMap` entry (entry index is specified by `Parameter`). If corresponding FlipMap is
not set (i.e. the value is not `0x1F`), rooms won't be flipped. `Parameter` defines a `FlipMap` entry to work with.

TrigAction `0x05`: -- Flip Off
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Tries to turn alternate rooms _off_, judging on current value of a given `FlipMap` entry (entry index is specified by `Parameter`). If corresponding FlipMap is
not set (i.e. the value is not `0x1F`), rooms won't be flipped. `Parameter` defines a `FlipMap` entry to work with.

TrigAction `0x06` -- Look at Item
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Specifies an entity which current camera should look at. If current camera is ``ordinary'' one following Lara, then it will also rotate Lara model in a target
direction, creating an illusion of Lara looking at it. If current camera is changed to ``triggered'' one (by trigger action `0x01` -- see above), then this
camera's orientation will be changed to a given entity. Note that if such camera change is desired, this action should come first, not the *Camera* one.

`Parameter` specifies an entity index to look at.

TrigAction `0x07` --  End Level
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Immediately loads next level. In TR1-3 and TR5, `Parameter` field is not used, i.e. engine just loads next level specified in script. In TR4, so called ``hub
system'' was implemented, which allows Lara to jump between levels back and forth. For this reason, _End Level_ trigger action must also explicitly specify
level index to jump.

TrigAction `0x08` -- Play Soundtrack
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Triggers a playback of a soundtrack specified in `Parameter` field. Type of soundtrack (_looped_ or _one-shot_) is hardcoded and assigned automatically.

This trigger action makes use of _trigger mask_ *and* _one-shot trigger flag_ to mark if this track was already played with a given _trigger mask_ or not in a
special internal _soundtrack map_. That is, if it is called with _trigger mask_ set to, say, `0x01`, then all further calls from triggers with same _trigger
mask_ will be ignored. However, if same track playback is called with _trigger mask_ value of `0x02`, it will play again, as it's another byte in _trigger
mask_. Effectively, it allows to play specified track _six times_ (five bits of _activation mask_ plus one bit of _one-shot flag_). Comparison is done via
bitwise `AND` operation, so if playback is called with _trigger mask + one-shot_ value of `(0x1F + 0x20 = 0x3F)`, then any other playback call to that track
will be blocked.

[NOTE]
====
In TR1, soundtrack playback is more complicated. For some reason, in PC version programmers completely disabled playback for majority of soundtracks, leaving
only five or six most significant ones to play (like title theme or cutscene audio). _Looped_ soundtracks were also completely ignored -- instead, background
ambience is explicitly specified by script entry, rather than trigger action (that's the reason why PC version has four different ambience types when compared
to PSX version).

To overcome this issue and enable complete soundtrack functionality, several patches were created by the community. However, PC version is missing _soundtrack
map_ structure, which potentially produces bugs when single track could be played independently by both triggers in the same level, although mostly this bug
comes unnoticed, as majority of TR1 soundtracks are engaged only once in a level.
====

TrigAction `0x09` -- Effect
^^^^^^^^^^^^^^^^^^^^^^^^^^^

_Effect_ (or _flipeffect_ in TRLE terms) does not necessarily mean ``special effect'' or so. By the name of ``effect'' comes _any non-trivial or special trigger action which should be
seperately defined_. This workaround was implemented because TR engines lack any scripting language to program arbitrary trigger, so you can consider an
_effect_ as a call to some ``pre-compiled'' scripted function.

For example, in TR2 ``Lara's Home'', there is a need to control assault course timer, like restarting it while reaching start point or stopping it when Lara is off the course. This task is accomplished via several different effects.

NOTE: The list of _effects_ differs across game versions. These will be listed in a separate section noting changes from version to version.

TrigAction `0x0A` -- Secret Found
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Plays ``secret'' soundtrack theme and marks a secret number specified in `Parameter` field as found. For finding each secret, another `Parameter` value must be
specified, or else secret won't be counted as found.

TrigAction `0x0B` -- Clear bodies
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

{TR1}{TR2}{TR3} Removes dead bodies of enemies from a level to conserve memory usage. This action has effect only on entities which had _clear body_ flag
specified in their parameters (see further). `Parameter` field is unused.

NOTE: This trigger action caused significant confusion in TRLE community. In level editor, action is called _BODYBAG_, and makes no visible effect in game, so
various speculations were made regarding action's true purpose. Some people thought it is used to attach a backpack to Lara in ``Angkor Wat'' cutscene, another
people thought it is used for lipsync or dragging SAS troop body in ``City of the Dead''. All this speculation was proven wrong.

TrigAction `0x0C` -- Flyby
^^^^^^^^^^^^^^^^^^^^^^^^^^

{TR4}{TR5} Engages a _flyby camera sequence_ specified in `Parameter` field. The feature was added in TR4 and enables to play cinematographic interludes with
camera continuously ``flying'' from one point to another. Such _sequences_, their _points_, properties and order are defined in a level editor, and engine moves
camera across them using _spline function_.

++uint16_t++ immediately following flyby's own entry contains _one-shot flag_ at `0x0100`. If this flag is not set, flyby will infinitely loop. As with _Camera_ TrigAction, flag at `0x8000` is a continuation bit, which overrides previous entry's continuation bit.

TrigAction `0x0D` -- Cutscene
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

{TR4}{TR5} Engages a cutscene pre-defined in script file. `Parameter` is taken as cutscene ID. In turn, script file refers to `CUTSEQ.PAK` (TR4) or `CUTSEQ.BIN`
(TR5) file to get all the data for a cutscene, such as _actor positions and animations_, _camera movement_, _soundtrack_ and many more. There will be a special
section describing particular `CUTSEQ.PAK` file format.

This concludes the description of _Trigger_ FloorData function _action types_.
