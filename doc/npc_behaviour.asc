[[non-player-character-behaviour]]
Non-Player Character Behaviour
------------------------------

Overview
~~~~~~~~

All the Tomb Raider game physics and entity behaviour is hardcoded, with each type ID being associated with some specific sort of behaviour (as Lara,
as a boat, as a tiger, as a door, as a boulder, as a lock, etc.). That is, each model refer two internal engine routines -- _collisional_ one and _control_ one. For static entities (like flame emitters), _collisional_ routine may contain no functional code, while _control_ routine is present. On contrary, ``decorative'' entities (usually called _animatings_ in TRLE) may lack _control_ code, while retaining _collisional_ code.

Several entity types may share the same collisional and/or control routines -- for example, there is one generic collisional routine for almost all enemies, another generic routine for doors, and another one for _standable_ entities, like bridge or platform objects.

Lara is unique player character, so she has a large set of both _control_ and _collisional_ routines, which are switched depending on her current _state_.

[NOTE]
====
In original Tomb Raider source code, notation for collisional and state routines follows two different schemes. For Lara, collisional and control routines are called `lara_col_STATE` and `lara_as_STATE`, where `STATE` is the name of the state, like _walk, run, reach_, and so on.

For other entity types, there is more generic scheme: collisional routines are called `NAMECollision`, where `NAME` is entity type name, like _CreatureCollision_, and control routines are called `NAMEControl`, where `NAME` is entity type name. E.g., bear will have a pair of routines linked to it, named _CreatureCollision_ and _BearControl_.
====

Entity Scripting
~~~~~~~~~~~~~~~~

Despite the existence of _script files_, here is no any scripting for entity behaviour, like in most contemporary games. This hardcoding makes it difficult to port the earlier Tomb Raider
scenarios to the engines of the later games, which could be desirable with their improved hardware support. While textures, models, and animations
can be ported, behaviour cannot be.

However, there is a small change in TR4 and TR5 which indicates that specific entity behaviour can be altered -- it's called _OCB_. It was briefly described in <<object-code-bit, this section>>. OCB is a special value defined for each entity instance, based on which entity can switch the way it acts (most prominent examples are flame emitters, which change their size and emit direction based on OCB, and teeth spikes, which change their orientation in space). 

Sometimes OCB is interpreted as a ``packed'' field with several values incorporated -- like teeth spike OCB contain information about their horizontal and vertical orientation, and also about their ``physical'' behaviour (stick out constantly, pop-retract in looped manner, or pop-retract just once).

[TIP]
====
For list of valid entity OCBs in TR4, you may refer to TRLE User's Manual, although it was written in a big rush, and thus it lacks many existing OCBs for many entities. There are also fan-made OCB lists which are much more comprehensive.

As for TR5, no proper OCB list exists for its entity types, so it may be considered a big unknown.
====

However, OCB can't be seriously called ``scripting'', as it also operates with pre-defined hardcoded behaviour.

[NOTE]
====
Recent patches for TR4 game engine (used to play custom levels), like _TREP_ and _TRNG_, feature some kind of basic scripting functionality. However, there's still no sign of _real scripting language_ in them, and such scripting is basically specifying pre-defined variables to alter entity behaviour, just like OCB does.
====

Pathfinding
~~~~~~~~~~~

Despite the lack of scripting, the Tomb Raider series does have navigation hints for the Non-Player Characters; those entities that move freely across the maps under the
command of the game AI. NPCs find their way in a level by checking ``FloorData'' collisional functions in the same way Lara does, and also with the help of special data structures which are used for proper pathfinding.

Data Structures
^^^^^^^^^^^^^^^

TR engines use three different structures to assist pathfinding. These are _boxes, overlaps, and zones_. Most sectors point to some _box_, the main exceptions being horizontal-portal sectors.
Several neighbour sectors may point to the same box. A box is a horizontal rectangle, with corners and height specified; each box also has a pointer into the
list of _overlaps_. Each segment in that list is the list of accessible neighbouring boxes for some box; the NPCs apparently select from this list to decide where
to go next.

This selection is done with the help of the _zones_. These structures of 6 (TR1) or 10 (TR2-TR5) ++int16_t++s that act as zone IDs;
their overall indexing is the same as the boxes, meaning that each box will have an associated set of zone IDs. An NPC will select one of this set to use, and
will prefer to go only into the overlaps-list boxes that have the same zone value as the box it is currently in. For example, one can create guard paths by making
chains of zone-ID-sharing boxes, with their overlaps pointing to the next boxes in those chains.

[[Boxes]]
Boxes
+++++

There are two variations of box structure -- one for TR1 and another for TR2 and any other game version.

[[tr_box]]
[source,cpp]
----
struct tr_box   // 20 bytes
{
    uint32_t Zmin;          // Horizontal dimensions in global units
    uint32_t Zmax;
    uint32_t Xmin;
    uint32_t Xmax;
     int16_t TrueFloor;     // Height value in global units
     int16_t OverlapIndex;  // Index into Overlaps[].
};
----

[[tr2_box]]
[source,cpp]
----
struct tr2_box   // 8 bytes
{
    uint8_t Zmin;          // Horizontal dimensions in sectors
    uint8_t Zmax;
    uint8_t Xmin;
    uint8_t Xmax;
    int16_t TrueFloor;     // Height value in global units
    int16_t OverlapIndex;  // Index into Overlaps[]. 
};
----

In `OverlapIndex`, the high bit is sometimes set; this occurs in front of swinging doors and the like.

Overlaps
++++++++

This is a set of lists of neighbouring boxes for each box, each member being a `uint16_t`. NPCs apparently
use this list to decide where to go next.

Overlaps must be parsed in serial manner, as with _FloorData_ functions: the highest bit (`0x8000`) being set marks the end of each list. 

Zones
+++++

This is a set of ++int16_t++s, 6 for TR1 and 10 for TR2-5. NPCs prefer to travel to a box with the same zone ID as the one they are currently at.
Which of these zone IDs it uses depends on the kind of the NPC and its current state. The first half of the Zones structure is for the _normal_ room state,
and the second half is for the _alternate_ (flipped) room state. TR1 has 2 sets of ground zones and 1 set of fly zones:

[[tr_zone]]
[source,cpp]
----
struct tr_zone   // 12 bytes
{
    uint16_t GroundZone1_Normal; 
    uint16_t GroundZone2_Normal; 
    uint16_t FlyZone_Normal; 
    uint16_t GroundZone1_Alternate; 
    uint16_t GroundZone2_Alternate; 
    uint16_t FlyZone_Alternate; 
};
----

TR2-5 have similar breakdowns, though they have 4 ground zones:

[[tr2_zone]]
[source,cpp]
----
struct tr2_zone   // 20 bytes
{
    uint16_t GroundZone1_Normal; 
    uint16_t GroundZone2_Normal; 
    uint16_t GroundZone3_Normal; 
    uint16_t GroundZone4_Normal; 
    uint16_t FlyZone_Normal; 
    uint16_t GroundZone1_Alternate; 
    uint16_t GroundZone2_Alternate; 
    uint16_t GroundZone3_Alternate; 
    uint16_t GroundZone4_Alternate; 
    uint16_t FlyZone_Alternate; 
};
----

The ground zones are for NPCs that travel on the ground, while the fly zones are for flying or swimming NPCs.

AI Objects
~~~~~~~~~~

Since TR3, in addition to pathfinding data structures, there are now special _AI objects_, which are used in a waypoint-like manner, defining specific action, like wandering between two points, guarding specific point or running to specific place in case Lara is around. For example, MP Guards in TR3's ``Area 51'' may patrol specific area when they are limited by special _AI_PATROL_ object.

[NOTE]
====
Not every NPC is ``taught'' to work with AI objects -- usually, only ``smart'' human enemies or friends can take advantage of them. Analyzing level files with utilities like _FexInspect_ may help understanding particular AI object setup and learn which NPCs can actually work with them.
====

Specific set of AI objects and their respective entity type IDs are different across game versions, but types themselves largely remained unchanged from TR3 to TR5. Here are they:

* *AI_GUARD* -- Makes the enemy stay on his current position and turn his head, looking left and right, with a 180 degree field of view -- so his ``viewing cone'' is continuously changed, based on current look direction. When Lara gets into his ``viewing cone'', default entity behaviour is engaged -- for example, MP guards will chase Lara and try to beat her.
* *AI_AMBUSH* -- Makes the enemy run to a designated square by dropping an AI_AMBUSH object on the same sector with him, and another AI_AMBUSH on the sector where he should run to. He will do that only if he spots Lara (hence the name). After reaching second AI_AMBUSH point, enemy will switch to default behaviour. Best example is MP Guard in ``Area 51'' who locks out first secret, if you won't manage to kill him in time after he noticed you.
* *AI_PATROL1* and *AI_PATROL2* -- Makes the enemy patrol specific path between AI_PATROL1 and AI_PATROL2 locations. To make it work, AI_PATROL1 object must be in the same sector with enemy, and AI_PATROL2 must be in the point to which enemy must go. After reaching AI_PATROL2 point, enemy will return to AI_PATROL1 point, and vice versa. It's also possible to specify another ``starting point'' for enemy by dropping extra AI_PATROL1 object -- then enemy will go to this secondary AI_PATROL1 object just after activation. If enemy spots Lara, he will switch to default behaviour.
* *AI_MODIFY* -- When placed in the same sector with _AI_GUARD_, it makes the enemy look straight ahead, instead of turning his head left and right.
* *AI_FOLLOW* -- Used primarily with friendly NPCs, and makes them wait for Lara and then ``lead'' her to specific point. For such behaviour, one AI_FOLLOW object must be placed in the same sector as NPC, and second AI_FOLLOW object must be placed on target point. If Lara shoots NPC affected with AI_FOLLOW behaviour, he will abandon it and become hostile.

[NOTE]
====
If there is a HEAVYTRIGGER under an AI_AMBUSH or AI_PATROL object, the enemy will activate it only when he gets there.
====

{TR4}{TR5} TR4 introduced two additional AI objects, *AI_X1* and *AI_X2*. For example, these are used with SAS Guards in _Cairo_ story arc. When AI_X1 object is placed in the same sector with SAS Guard, he will prefer to shoot grenades instead of bullets. If another SAS Guard with AI_X2 is activated nearby, then first one will stop shooting grenades, and second one will shoot them instead.

AI Object IDs
^^^^^^^^^^^^^

Here are all AI Object type IDs in each TR version which has them:

[width="40%",cols="2<,1^m,1^m,1^m",options="header",align="center"]
|=============================
|            | TR3 | TR4 | TR5
| AI_GUARD   | 74  | 398 | 378
| AI_AMBUSH  | 75  | 399 | 379
| AI_PATROL1 | 76  | 400 | 380
| AI_PATROL2 | 79  | 403 | 383
| AI_MODIFY  | 77  | 401 | 381
| AI_FOLLOW  | 78  | 402 | 382
| AI_X1      |     | 404 | 384
| AI_X2      |     | 405 | 385
|=============================

AI Data Block in TR4-5
^^^^^^^^^^^^^^^^^^^^^^

Beginning with TR4, AI objects are _not kept along with other entities_. Instead, they have their own structure, which is basically simplified <<tr4_entity>> structure, and moved to separate data block. This seems reasonable, as the only purpose of AI objects is to serve as ``waypoints'', and they have neither _collisional_ nor _control_ code attached to them.

The format of AI object structure as follows:

[[tr_ai_object]]
[source,cpp]
----
struct tr4_ai_object   // 24 bytes
{
    uint16_t TypeID     // Object type ID (same meaning as with tr4_entity)
    uint16_t Room;      // Room where AI object is placed
     int32_t x, y, z;   // Coordinates
     int16_t OCB;       // Same meaning as with tr4_entity
    uint16_t Flags;     // Activation mask, bitwise-shifted left by 1
     int32_t Angle;
};
----