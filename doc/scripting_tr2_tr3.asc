Scripting in TR2/TR3 for PC/PSX
-------------------------------

Overview
~~~~~~~~

The internal gameflow, which levels come in what order, what item(s) Lara has at the beginning of each level, the filenames of the level and cut-scene files,
all the visible text (e.g. ``Save Game,'' ``Rusty Key,'' etc.), and various other options are controlled by a script file called `TOMBPC.DAT`/`TOMBPSX.DAT`. The
scripts were compiled using a utility known as `GAMEFLOW.EXE` which was distributed by Eidos in the German release of Tomb Raider II Gold. Both TR2 and TR3 use
these script files. From both games the format remained unchanged. TR1's gameflow is hardcoded thus there is no external file controlling this resulting in loss
of flexibility.

[source,cpp]
----
uint32_t Version;             // The Script Version (Always 3 for TR2/3)
uint8_t Description[256];     // Null-terminated string describing the script copyright info etc. Not encrypted.
uint16_t Unknown1;            // ?
int32_t FirstOption;          // Level to go to when WHAT happens?
int32_t TitleReplace;         // Level to go to when WHAT happens?
int32_t OnDeathDemoMode;      // Level to go to when Lara dies during demo mode
int32_t OnDeathInGame;        // Level to go to when Lara dies during the game
int32_t DemoTime;             // Time in game ticks (1/30th of a second?) to wait before starting a demo
int32_t OnDemoInterrupt;      // Level to go to when demo mode is interrupted
int32_t OnDemoEnd;            // Level to go to when the demo ends
uint8_t Unknown2[36];         // Filler
int16_t NumLevels;            // Number of levels in the game.
int16_t NumChapterScreens;    // Chapter screens (Present in TR2, first used in TR3)
int16_t NumTitles;            // Only one, TITLE.TR2
int16_t NumFMVs;              // Number of FMV cutscenes PC - (*.RPL), PSX - (*STR)
int16_t NumCutscenes;         // Number of in-game (engine-rendered) cutscenes (CUT*.TR2)
int16_t NumDemoLevels;        // Number of demo levels
int16_t TitleSoundID;         // ID of title soundtrack
int16_t SingleLevel;          // If doing only a single level
uint8_t Unknown3[32];         // Filler
uint16_t Flags;               // Various flags see below
uint8_t Unknown4[6];          // Filler
uint8_t XORKey;               // Key used to encrypt/decrypt strings
uint8_t LanguageID;           // Script Language ID see below
int16_t SecretSoundID;        // ID of soundtrack to play when a secret is found
uint8_t Unknown5[4];          // Filler

// 1. Offset to each string is end offset of *StringOffsets' + *StringOffsets[i]
// 2. String length is calculated by (*StringOffsets[i+1]-*StringOffsets[i])
// 3. If Flags & UseXor true each character must be ^ XorKey to decrypt the string.

uint16_t LevelStringOffsets[NumLevels+1];                 //Relative offset to level name strings
StringArray LevelStrings[NumLevels];                      //Usually Encrypted
uint16_t ChapterScreenStringOffsets[NumChapterScreens+1]; //Relative offset to chapter screen strings
StringArray ChapterScreenStrings[NumChapterScreens];      //Usually Encrypted
uint16_t TitleStringOffsets[NumTitles+1];                 //Relative offset to title strings
StringArray TitleStrings[NumTitles];                      //Usually Encrypted
uint16_t FMVStringOffsets[NumFMVs+1];                     //Relative offset to fmv path strings
StringArray FMVStrings[NumFMVs];                          //Usually Encrypted
uint16_t LevelPathStringOffsets[NumLevels+1];             //Relative offset to level path strings
StringArray LevelPathStrings[NumLevels];                  //Usually Encrypted
uint16_t CutscenePathStringOffsets[NumCutscenes+1];       //Relative offset to cutscene path strings
StringArray CutscenePathStrings[NumCutscenes];            //Usually Encrypted

uint16_t SequenceOffsets[NumLevels+2]; //Relative offset to sequence info (maybe+2 because title needs sequence +numtitles?)
SequenceInfo Sequences[NumLevels+1];   //Sequence info see explanation below (SIZE is dependant on first opcode)

uint16_t DemoLevelIDs[NumDemoLevels];

#if PSX //PSX Only
    PSXFMVInfo[NumFMVs];// Two uint32_t, flag? then length/lba related?
#endif

int16_t NumGameStrings;
uint16_t GameStringOffsets[NumGameStrings+1];   //Relative offset to game strings
StringArray GameStrings[NumGameStrings];        //Usually Encrypted

#if PSX // If PSX
    uint16_t PSXStringOffsets[80+1];//Fixed at 80?
    StringArray PSXStrings[80+1];//Fixed at 80? Usually Encrypted
#else // PC
    uint16_t PCStringOffsets[80+1];//Fixed at 80?
    StringArray PCStrings[80+1];//Fixed at 80? Usually Encrypted
#endif

uint16_t Puzzle1StringOffsets[NumLevels+1]; //Relative offset to puzzle1 strings
StringArray Puzzle1Strings[NumLevels];      //Usually Encrypted

uint16_t Puzzle2StringOffsets[NumLevels+1]; //Relative offset to puzzle2 strings
StringArray Puzzle2Strings[NumLevels];      //Usually Encrypted

uint16_t Puzzle3StringOffsets[NumLevels+1]; //Relative offset to puzzle3 strings
StringArray Puzzle3Strings[NumLevels];      //Usually Encrypted

uint16_t Puzzle4StringOffsets[NumLevels+1]; //Relative offset to puzzle4 strings
StringArray Puzzle4Strings[NumLevels];      //Usually Encrypted

uint16_t Pickup1StringOffsets[NumLevels+1]; //Relative offset to pickup1 strings
StringArray Pickup1Strings[NumLevels];      //Usually Encrypted

uint16_t Pickup2StringOffsets[NumLevels+1]; //Relative offset to pickup2 strings
StringArray Pickup2Strings[NumLevels];      //Usually Encrypted

uint16_t Key1StringOffsets[NumLevels+1];    //Relative offset to key1 strings
StringArray Key1Strings[NumLevels];         //Usually Encrypted

uint16_t Key2StringOffsets[NumLevels+1];    //Relative offset to key2 strings
StringArray Key2Strings[NumLevels];         //Usually Encrypted

uint16_t Key3StringOffsets[NumLevels+1];    //Relative offset to key3 strings
StringArray Key3Strings[NumLevels];         //Usually Encrypted

uint16_t Key4StringOffsets[NumLevels+1];    //Relative offset to key4 strings
StringArray Key4Strings[NumLevels];         //Usually Encrypted
----

PSX FMV Info
~~~~~~~~~~~~

[source,cpp]
----
struct PSXFMVInfo
{
    uint32_t flags;   //? First FMV usually has this set as 1
    uint32_t unknown; //Possibly: size, lba or length can't remember which
};
----

This specific info is exclusive to `TOMBPSX.DAT`.

Script Flags
~~~~~~~~~~~~

[source,cpp]
----
enum ScriptFlags
{
    DemoVersion =              (1 << 0), //(=1) Is this a demo version of the game
    TitleDisabled =            (1 << 1), //(=1) Disables Title Screen
    CheatModeCheckDisabled =   (1 << 2), //(=1) Related to in-game cheats?
    NoInputTimeout =           (1 << 3), //(=1) Disables input timeout for demo mode
    LoadSaveDisabled =         (1 << 4), //(=1) Disables loading/saving
    ScreenSizingDisabled =     (1 << 5), //(=1) Disables screen resizing PC only?
    LockoutOptionRing =        (1 << 6), //(=1) Stops options ring from being selected
    DozyCheatEnabled =         (1 << 7), //(=1) Enable DOZY (sometimes they removed the internal code)
    UseXor =                   (1 << 8), //(=1) If true all string chars (except null termination) must be xor-ed by XorKey.
    GymEnabled =               (1 << 9), //(=1) Is Gym available on title screen.
    SelectAnyLevel =           (1 << 10),//(=1) Unlocks all levels
    EnableCheatCode =          (1 << 11) //(=1) Related to in-game cheats?
};
----

These flags enable various in-game features if set.

Script Language
~~~~~~~~~~~~~~~

[source,cpp]
----
enum ScriptLanguage
{
    LANG_ENGLISH = 0,
    LANG_FRENCH = 1,
    LANG_GERMAN = 2,
    LANG_AMERICAN = 3,
    LANG_JAPANESE = 4
};
----

Script Sequencing & Opcodes/Operands
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Each script has ``sequence information'', Opcodes and Operands are all stored as `uint16_t`. Sequences contain a set of commands to execute where an additional
value (operand) is usually passed as a parameter to the function the command needs to call. Note: that if a level is a demo level, its level ID will be 1024
higher than a _normal_ level ID.

[source,cpp]
----
struct SequenceInfo
{
    uint16_t Opcode;   //Command
    uint16_t Operand;  //Not always used, depends on the opcode
};

enum ScriptOpcodes
{
    OP_PICTURE = 0,            // ?
    OP_LISTSTART = 1,          // ?
    OP_LISTEND = 2,            // ?
    OP_STARTFMV = 3,           // Play FMV, operand is FMV ID
    OP_STARTLEVEL = 4,         // Play (interactive) level, operand is level ID
    OP_STARTCINE = 5,          // Play Cutscene, operand is cutscene ID
    OP_LEVELCOMPLETE = 6,      // Do level-completion display (no operands)
    OP_STARTDEMO = 7,          // Play demo level: operand is level ID
    OP_JUMPTOSEQUENCE = 8,     // Jumps to specified sequence?
    OP_ENDSEQUENCE = 9,        // End of sequence (no operands)
    OP_SETTRACK = 10,          // Play soundtrack: operand is soundtrack ID (it precedes opcodes of associated levels)
    OP_SUNSETENABLED = 11,     // Bartoli's Hideous
    OP_LOADINGPIC = 12,        // Chapter screen: operand is chapter ID
    OP_DEADLYWATER = 13,       // Temple of Xian? Kills Lara when she touches water?
    OP_REMOVEWEAPONS = 14,     // Lose your weapons (no operands)
    OP_GAMECOMPLETE = 15,      // End of game (no operands)
    OP_CUTANGLE = 16,          // Associated with cutscenes; a viewpoint control? (one operand?)
    OP_NOFLOOR = 17,           // For Floating Islands/Thames Wharf? (one operand?)
    OP_ADDTOINVENTORY = 18,    // Give item; operand is item type (see below)
    OP_LARASTARTANIMATION = 19,// Item-type 12 state to start level in: operand is state number
    OP_NUMSECRETS = 20,        // Number of secrets (overrides engine's hardcoded count of them?): operand is that number
    OP_KILLTOCOMPLETE = 21,    // Probably for Ice Palace boss (no operands)
    OP_REMOVEAMMO = 22         // Lose your ammo and medipacks? (no operands?)
};
----

The correct way to parse Sequence Info is to first read a `uint16_t` opcode specifying what this command within the sequence does. In reference to the list
above, certain commands MUST have an additional `uint16_t` read from the sequence data directly after the opcode that's the pairing operand to this opcode. Not
all opcodes have an operand so this must be done correctly. The original games execute each sequence command 1 by 1 until it reaches `OP_ENDSEQUENCE`, where it
then runs the next sequence.

Opcode-18 `OP_ADDTOINVENTORY`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

(repeat means give another)

.After finding all the secrets in a level (Tomb Raider 2)
* 0 -- Pistols
* 1 -- Shotgun
* 2 -- Automatic pistols
* 3 -- Uzis
* 4 -- Harpoon gun
* 5 -- M-16
* 6 -- Grenade launcher
* 7 -- Pistol clip
* 8 -- Shotgun-shell box
* 9 -- Automatic-pistol clip
* 10 -- Uzi clip
* 11 -- Harpoon bundle
* 12 -- M-16 clip
* 13 -- Grenade pack
* 14 -- Flare box
* 15 -- Small medipack
* 16 -- Big medipack
* 17 -- Pickup 1
* 18 -- Pickup 2
* 19 -- Puzzle 1
* 20 -- Puzzle 2
* 21 -- Puzzle 3
* 22 -- Puzzle 4
* 23 -- Key 1
* 24 -- Key 2
* 25 -- Key 3
* 26 -- Key 4

.When a level starts (Tomb Raider 2)
* 1000 -- Pistols
* 1001 -- Shotgun
* 1002 -- Automatic pistols
* 1003 -- Uzis
* 1004 -- Harpoon gun
* 1005 -- M16
* 1006 -- Grenade launcher
* 1007 -- Pistol clip
* 1008 -- Shotgun-shell box
* 1009 -- Automatic-pistol clip
* 1010 -- Uzi clip
* 1011 -- Harpoon bundle
* 1012 -- M16 clip
* 1013 -- Grenade pack
* 1014 -- Flare box
* 1015 -- Small medipack
* 1016 -- Big medipack
* 1017 -- Pickup 1
* 1018 -- Pickup 2
* 1019 -- Puzzle 1
* 1020 -- Puzzle 2
* 1021 -- Puzzle 3
* 1022 -- Puzzle 4
* 1023 -- Key 1
* 1024 -- Key 2
* 1025 -- Key 3
* 1026 -- Key 4

Tomb Raider 2 Identifications
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

NOTE: [blue]#TR2 only information here. These lists are virtually colored blue.#

.FMV IDs
* 0 -- LOGO (everybody's corporate logos)
* 1 -- ANCIENT (monks vs. dragon)
* 2 -- MODERN (Lara drops in from helicopter)
* 3 -- LANDING (Seaplane lands at rig)
* 4 -- MS (Lara hitchhikes on a minisub)
* 5 -- CRASH (Lara goes to Tibet and has a rough landing there)
* 6 -- JEEP (Lara steals it and outruns Bartoli's goons)
* 7 -- END (Lara escaping the collapsing lair)

.Cutscene IDs
* 0 -- CUT1 (At the end of the Great Wall)
* 1 -- CUT2 (Lara the stowaway)
* 2 -- CUT3 (Bartoli vs. goon)
* 3 -- CUT4 (Bartoli stabs himself)

.Soundtrack IDs
* 0 -- BLANK (no sound)
* 3 -- CUT1 (``at the fancy door'' soundtrack)
* 4 -- CUT2 (``Lara the stowaway'' soundtrack)
* 5 -- CUT3 (``Bartoli vs. goon'' soundtrack)
* 30 -- CUT4 (``Bartoli stabs himself'' soundtrack)
* 31 -- DERELICT (eerie choppy/echo-y synths)
* 32 -- WATER (dripping/pouring water sounds)
* 33 -- WIND (Blowing wind)
* 34 -- HEARTBT (musical embellishment of one)
* 52 -- SHOWER (that infamous shower scene)
* 58 -- MACHINES (in the offshore rig)
* 59 -- FLOATING (wispy synths)

Other Script Commands
~~~~~~~~~~~~~~~~~~~~~~

` FirstOption`, `TitleReplace`, `OnDeathDemoMode`, and `OnDeathInGame` can also be setup to perform specific actions. For example,  `OnDeathInGame` will be set
to "0x500" which loads the title screen when Lara dies in-game. Some other commands are as follows:


* *ExitGame* - `0x700` - Exit entire game?
* *ExitToTitle* - `0x500` - Exit to Title Screen
* *Demo* - `0x400` - Load Demo level
